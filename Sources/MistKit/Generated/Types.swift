// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Query Records
    ///
    /// Fetch records using a query with filters and sorting options
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/records/query`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/query/post`.
    func post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_query(_ input: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_query.Input) async throws -> Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_query.Output
    /// Modify Records
    ///
    /// Create, update, or delete records (supports bulk operations)
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/records/modify`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/modify/post`.
    func post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_modify(_ input: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_modify.Input) async throws -> Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_modify.Output
    /// Lookup Records
    ///
    /// Fetch specific records by their IDs
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/records/lookup`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/lookup/post`.
    func post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_lookup(_ input: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_lookup.Input) async throws -> Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_lookup.Output
    /// Fetch Record Changes
    ///
    /// Get all record changes relative to a sync token
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/records/changes`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/changes/post`.
    func post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_changes(_ input: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_changes.Input) async throws -> Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_changes.Output
    /// List All Zones
    ///
    /// Fetch all zones in the database
    ///
    /// - Remark: HTTP `GET /database/{version}/{container}/{environment}/{database}/zones/list`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/list/get`.
    func get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_list(_ input: Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_list.Input) async throws -> Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_list.Output
    /// Lookup Zones
    ///
    /// Fetch specific zones by their IDs
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/zones/lookup`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/lookup/post`.
    func post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_lookup(_ input: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_lookup.Input) async throws -> Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_lookup.Output
    /// Modify Zones
    ///
    /// Create or delete zones (only supported in private database)
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/zones/modify`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/modify/post`.
    func post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_modify(_ input: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_modify.Input) async throws -> Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_modify.Output
    /// Fetch Zone Changes
    ///
    /// Get all changed zones relative to a meta-sync token
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/zones/changes`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/changes/post`.
    func post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_changes(_ input: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_changes.Input) async throws -> Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_changes.Output
    /// List All Subscriptions
    ///
    /// Fetch all subscriptions in the database
    ///
    /// - Remark: HTTP `GET /database/{version}/{container}/{environment}/{database}/subscriptions/list`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/list/get`.
    func get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_list(_ input: Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_list.Input) async throws -> Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_list.Output
    /// Lookup Subscriptions
    ///
    /// Fetch specific subscriptions by their IDs
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/subscriptions/lookup`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/lookup/post`.
    func post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_lookup(_ input: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_lookup.Input) async throws -> Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_lookup.Output
    /// Modify Subscriptions
    ///
    /// Create, update, or delete subscriptions
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/subscriptions/modify`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/modify/post`.
    func post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_modify(_ input: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_modify.Input) async throws -> Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_modify.Output
    /// Get Current User
    ///
    /// Fetch the current authenticated user's information
    ///
    /// - Remark: HTTP `GET /database/{version}/{container}/{environment}/public/users/current`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/public/users/current/get`.
    func get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_current(_ input: Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_current.Input) async throws -> Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_current.Output
    /// Discover User Identities
    ///
    /// Discover all user identities based on email addresses or user record names
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/public/users/discover`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/public/users/discover/post`.
    func post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_discover(_ input: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_discover.Input) async throws -> Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_discover.Output
    /// Lookup Contacts (Deprecated)
    ///
    /// Fetch contacts (This endpoint is deprecated)
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/public/users/lookup/contacts`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/public/users/lookup/contacts/post`.
    @available(*, deprecated)
    func post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_lookup_sol_contacts(_ input: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_lookup_sol_contacts.Input) async throws -> Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_lookup_sol_contacts.Output
    /// Upload Assets
    ///
    /// Upload binary assets to CloudKit
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/assets/upload`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/assets/upload/post`.
    func post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_assets_sol_upload(_ input: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_assets_sol_upload.Input) async throws -> Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_assets_sol_upload.Output
    /// Create APNs Token
    ///
    /// Create an Apple Push Notification service (APNs) token
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/tokens/create`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/tokens/create/post`.
    func post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_create(_ input: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_create.Input) async throws -> Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_create.Output
    /// Register Token
    ///
    /// Register a token for push notifications
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/tokens/register`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/tokens/register/post`.
    func post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_register(_ input: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_register.Input) async throws -> Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_register.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Query Records
    ///
    /// Fetch records using a query with filters and sorting options
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/records/query`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/query/post`.
    public func post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_query(
        path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_query.Input.Path,
        headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_query.Input.Headers = .init(),
        body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_query.Input.Body
    ) async throws -> Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_query.Output {
        try await post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_query(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_query.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Modify Records
    ///
    /// Create, update, or delete records (supports bulk operations)
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/records/modify`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/modify/post`.
    public func post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_modify(
        path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_modify.Input.Path,
        headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_modify.Input.Headers = .init(),
        body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_modify.Input.Body
    ) async throws -> Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_modify.Output {
        try await post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_modify(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_modify.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Lookup Records
    ///
    /// Fetch specific records by their IDs
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/records/lookup`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/lookup/post`.
    public func post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_lookup(
        path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_lookup.Input.Path,
        headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_lookup.Input.Headers = .init(),
        body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_lookup.Input.Body
    ) async throws -> Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_lookup.Output {
        try await post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_lookup(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_lookup.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Fetch Record Changes
    ///
    /// Get all record changes relative to a sync token
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/records/changes`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/changes/post`.
    public func post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_changes(
        path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_changes.Input.Path,
        headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_changes.Input.Headers = .init(),
        body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_changes.Input.Body
    ) async throws -> Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_changes.Output {
        try await post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_changes(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_changes.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List All Zones
    ///
    /// Fetch all zones in the database
    ///
    /// - Remark: HTTP `GET /database/{version}/{container}/{environment}/{database}/zones/list`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/list/get`.
    public func get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_list(
        path: Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_list.Input.Path,
        headers: Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_list.Input.Headers = .init()
    ) async throws -> Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_list.Output {
        try await get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_list(Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_list.Input(
            path: path,
            headers: headers
        ))
    }
    /// Lookup Zones
    ///
    /// Fetch specific zones by their IDs
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/zones/lookup`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/lookup/post`.
    public func post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_lookup(
        path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_lookup.Input.Path,
        headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_lookup.Input.Headers = .init(),
        body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_lookup.Input.Body
    ) async throws -> Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_lookup.Output {
        try await post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_lookup(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_lookup.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Modify Zones
    ///
    /// Create or delete zones (only supported in private database)
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/zones/modify`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/modify/post`.
    public func post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_modify(
        path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_modify.Input.Path,
        headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_modify.Input.Headers = .init(),
        body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_modify.Input.Body
    ) async throws -> Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_modify.Output {
        try await post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_modify(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_modify.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Fetch Zone Changes
    ///
    /// Get all changed zones relative to a meta-sync token
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/zones/changes`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/changes/post`.
    public func post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_changes(
        path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_changes.Input.Path,
        headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_changes.Input.Headers = .init(),
        body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_changes.Input.Body
    ) async throws -> Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_changes.Output {
        try await post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_changes(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_changes.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List All Subscriptions
    ///
    /// Fetch all subscriptions in the database
    ///
    /// - Remark: HTTP `GET /database/{version}/{container}/{environment}/{database}/subscriptions/list`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/list/get`.
    public func get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_list(
        path: Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_list.Input.Path,
        headers: Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_list.Input.Headers = .init()
    ) async throws -> Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_list.Output {
        try await get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_list(Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_list.Input(
            path: path,
            headers: headers
        ))
    }
    /// Lookup Subscriptions
    ///
    /// Fetch specific subscriptions by their IDs
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/subscriptions/lookup`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/lookup/post`.
    public func post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_lookup(
        path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_lookup.Input.Path,
        headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_lookup.Input.Headers = .init(),
        body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_lookup.Input.Body
    ) async throws -> Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_lookup.Output {
        try await post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_lookup(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_lookup.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Modify Subscriptions
    ///
    /// Create, update, or delete subscriptions
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/subscriptions/modify`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/modify/post`.
    public func post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_modify(
        path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_modify.Input.Path,
        headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_modify.Input.Headers = .init(),
        body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_modify.Input.Body
    ) async throws -> Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_modify.Output {
        try await post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_modify(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_modify.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get Current User
    ///
    /// Fetch the current authenticated user's information
    ///
    /// - Remark: HTTP `GET /database/{version}/{container}/{environment}/public/users/current`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/public/users/current/get`.
    public func get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_current(
        path: Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_current.Input.Path,
        headers: Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_current.Input.Headers = .init()
    ) async throws -> Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_current.Output {
        try await get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_current(Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_current.Input(
            path: path,
            headers: headers
        ))
    }
    /// Discover User Identities
    ///
    /// Discover all user identities based on email addresses or user record names
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/public/users/discover`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/public/users/discover/post`.
    public func post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_discover(
        path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_discover.Input.Path,
        headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_discover.Input.Headers = .init(),
        body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_discover.Input.Body
    ) async throws -> Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_discover.Output {
        try await post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_discover(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_discover.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Lookup Contacts (Deprecated)
    ///
    /// Fetch contacts (This endpoint is deprecated)
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/public/users/lookup/contacts`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/public/users/lookup/contacts/post`.
    @available(*, deprecated)
    public func post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_lookup_sol_contacts(
        path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_lookup_sol_contacts.Input.Path,
        headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_lookup_sol_contacts.Input.Headers = .init(),
        body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_lookup_sol_contacts.Input.Body
    ) async throws -> Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_lookup_sol_contacts.Output {
        try await post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_lookup_sol_contacts(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_lookup_sol_contacts.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Upload Assets
    ///
    /// Upload binary assets to CloudKit
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/assets/upload`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/assets/upload/post`.
    public func post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_assets_sol_upload(
        path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_assets_sol_upload.Input.Path,
        headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_assets_sol_upload.Input.Headers = .init(),
        body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_assets_sol_upload.Input.Body
    ) async throws -> Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_assets_sol_upload.Output {
        try await post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_assets_sol_upload(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_assets_sol_upload.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Create APNs Token
    ///
    /// Create an Apple Push Notification service (APNs) token
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/tokens/create`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/tokens/create/post`.
    public func post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_create(
        path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_create.Input.Path,
        headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_create.Input.Headers = .init(),
        body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_create.Input.Body
    ) async throws -> Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_create.Output {
        try await post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_create(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_create.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Register Token
    ///
    /// Register a token for push notifications
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/tokens/register`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/tokens/register/post`.
    public func post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_register(
        path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_register.Input.Path,
        headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_register.Input.Headers = .init(),
        body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_register.Input.Body
    ) async throws -> Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_register.Output {
        try await post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_register(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_register.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    /// CloudKit Web Services API
    public enum Server1 {
        /// CloudKit Web Services API
        public static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://api.apple-cloudkit.com",
                variables: []
            )
        }
    }
    /// CloudKit Web Services API
    @available(*, deprecated, renamed: "Servers.Server1.url")
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.apple-cloudkit.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/ZoneID`.
        public struct ZoneID: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ZoneID/zoneName`.
            public var zoneName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ZoneID/ownerName`.
            public var ownerName: Swift.String?
            /// Creates a new `ZoneID`.
            ///
            /// - Parameters:
            ///   - zoneName:
            ///   - ownerName:
            public init(
                zoneName: Swift.String? = nil,
                ownerName: Swift.String? = nil
            ) {
                self.zoneName = zoneName
                self.ownerName = ownerName
            }
            public enum CodingKeys: String, CodingKey {
                case zoneName
                case ownerName
            }
        }
        /// - Remark: Generated from `#/components/schemas/Filter`.
        public struct Filter: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Filter/comparator`.
            @frozen public enum comparatorPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case EQUALS = "EQUALS"
                case NOT_EQUALS = "NOT_EQUALS"
                case LESS_THAN = "LESS_THAN"
                case LESS_THAN_OR_EQUALS = "LESS_THAN_OR_EQUALS"
                case GREATER_THAN = "GREATER_THAN"
                case GREATER_THAN_OR_EQUALS = "GREATER_THAN_OR_EQUALS"
                case NEAR = "NEAR"
                case CONTAINS_ALL_TOKENS = "CONTAINS_ALL_TOKENS"
                case IN = "IN"
                case NOT_IN = "NOT_IN"
                case CONTAINS_ANY_TOKENS = "CONTAINS_ANY_TOKENS"
                case LIST_CONTAINS = "LIST_CONTAINS"
                case NOT_LIST_CONTAINS = "NOT_LIST_CONTAINS"
                case BEGINS_WITH = "BEGINS_WITH"
                case NOT_BEGINS_WITH = "NOT_BEGINS_WITH"
                case LIST_MEMBER_BEGINS_WITH = "LIST_MEMBER_BEGINS_WITH"
                case NOT_LIST_MEMBER_BEGINS_WITH = "NOT_LIST_MEMBER_BEGINS_WITH"
            }
            /// - Remark: Generated from `#/components/schemas/Filter/comparator`.
            public var comparator: Components.Schemas.Filter.comparatorPayload?
            /// - Remark: Generated from `#/components/schemas/Filter/fieldName`.
            public var fieldName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Filter/fieldValue`.
            public struct fieldValuePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Filter/fieldValue/value`.
                @frozen public enum valuePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/Filter/fieldValue/value/case1`.
                    case case1(Swift.String)
                    /// - Remark: Generated from `#/components/schemas/Filter/fieldValue/value/case2`.
                    case case2(Swift.Double)
                    /// - Remark: Generated from `#/components/schemas/Filter/fieldValue/value/case3`.
                    case case3(Swift.Bool)
                    /// - Remark: Generated from `#/components/schemas/Filter/fieldValue/value/case4`.
                    case case4(OpenAPIRuntime.OpenAPIArrayContainer)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case3(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case4(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case3(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case4(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/Filter/fieldValue/value`.
                public var value: Components.Schemas.Filter.fieldValuePayload.valuePayload?
                /// - Remark: Generated from `#/components/schemas/Filter/fieldValue/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case STRING = "STRING"
                    case INT64 = "INT64"
                    case DOUBLE = "DOUBLE"
                    case BYTES = "BYTES"
                    case REFERENCE = "REFERENCE"
                    case ASSET = "ASSET"
                    case LOCATION = "LOCATION"
                    case TIMESTAMP = "TIMESTAMP"
                    case LIST = "LIST"
                }
                /// - Remark: Generated from `#/components/schemas/Filter/fieldValue/type`.
                public var _type: Components.Schemas.Filter.fieldValuePayload._typePayload?
                /// Creates a new `fieldValuePayload`.
                ///
                /// - Parameters:
                ///   - value:
                ///   - _type:
                public init(
                    value: Components.Schemas.Filter.fieldValuePayload.valuePayload? = nil,
                    _type: Components.Schemas.Filter.fieldValuePayload._typePayload? = nil
                ) {
                    self.value = value
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case value
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/Filter/fieldValue`.
            public var fieldValue: Components.Schemas.Filter.fieldValuePayload?
            /// Creates a new `Filter`.
            ///
            /// - Parameters:
            ///   - comparator:
            ///   - fieldName:
            ///   - fieldValue:
            public init(
                comparator: Components.Schemas.Filter.comparatorPayload? = nil,
                fieldName: Swift.String? = nil,
                fieldValue: Components.Schemas.Filter.fieldValuePayload? = nil
            ) {
                self.comparator = comparator
                self.fieldName = fieldName
                self.fieldValue = fieldValue
            }
            public enum CodingKeys: String, CodingKey {
                case comparator
                case fieldName
                case fieldValue
            }
        }
        /// - Remark: Generated from `#/components/schemas/Sort`.
        public struct Sort: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Sort/fieldName`.
            public var fieldName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Sort/ascending`.
            public var ascending: Swift.Bool?
            /// Creates a new `Sort`.
            ///
            /// - Parameters:
            ///   - fieldName:
            ///   - ascending:
            public init(
                fieldName: Swift.String? = nil,
                ascending: Swift.Bool? = nil
            ) {
                self.fieldName = fieldName
                self.ascending = ascending
            }
            public enum CodingKeys: String, CodingKey {
                case fieldName
                case ascending
            }
        }
        /// - Remark: Generated from `#/components/schemas/RecordOperation`.
        public struct RecordOperation: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RecordOperation/operationType`.
            @frozen public enum operationTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case create = "create"
                case update = "update"
                case forceUpdate = "forceUpdate"
                case replace = "replace"
                case forceReplace = "forceReplace"
                case delete = "delete"
                case forceDelete = "forceDelete"
            }
            /// - Remark: Generated from `#/components/schemas/RecordOperation/operationType`.
            public var operationType: Components.Schemas.RecordOperation.operationTypePayload?
            /// - Remark: Generated from `#/components/schemas/RecordOperation/record`.
            public var record: Components.Schemas.Record?
            /// Creates a new `RecordOperation`.
            ///
            /// - Parameters:
            ///   - operationType:
            ///   - record:
            public init(
                operationType: Components.Schemas.RecordOperation.operationTypePayload? = nil,
                record: Components.Schemas.Record? = nil
            ) {
                self.operationType = operationType
                self.record = record
            }
            public enum CodingKeys: String, CodingKey {
                case operationType
                case record
            }
        }
        /// - Remark: Generated from `#/components/schemas/Record`.
        public struct Record: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Record/recordName`.
            public var recordName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Record/recordType`.
            public var recordType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Record/recordChangeTag`.
            public var recordChangeTag: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Record/fields`.
            public struct fieldsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Record/fields/additionalProperties`.
                public struct additionalPropertiesPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/Record/fields/additionalProperties/value`.
                    @frozen public enum valuePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/Record/fields/additionalProperties/value/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/components/schemas/Record/fields/additionalProperties/value/case2`.
                        case case2(Swift.Double)
                        /// - Remark: Generated from `#/components/schemas/Record/fields/additionalProperties/value/case3`.
                        case case3(Swift.Bool)
                        /// - Remark: Generated from `#/components/schemas/Record/fields/additionalProperties/value/case4`.
                        case case4(OpenAPIRuntime.OpenAPIArrayContainer)
                        /// - Remark: Generated from `#/components/schemas/Record/fields/additionalProperties/value/case5`.
                        case case5(OpenAPIRuntime.OpenAPIObjectContainer)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case3(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case4(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case5(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case3(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case4(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case5(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/Record/fields/additionalProperties/value`.
                    public var value: Components.Schemas.Record.fieldsPayload.additionalPropertiesPayload.valuePayload?
                    /// - Remark: Generated from `#/components/schemas/Record/fields/additionalProperties/type`.
                    @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case STRING = "STRING"
                        case INT64 = "INT64"
                        case DOUBLE = "DOUBLE"
                        case BYTES = "BYTES"
                        case REFERENCE = "REFERENCE"
                        case ASSET = "ASSET"
                        case LOCATION = "LOCATION"
                        case TIMESTAMP = "TIMESTAMP"
                        case LIST = "LIST"
                    }
                    /// - Remark: Generated from `#/components/schemas/Record/fields/additionalProperties/type`.
                    public var _type: Components.Schemas.Record.fieldsPayload.additionalPropertiesPayload._typePayload?
                    /// Creates a new `additionalPropertiesPayload`.
                    ///
                    /// - Parameters:
                    ///   - value:
                    ///   - _type:
                    public init(
                        value: Components.Schemas.Record.fieldsPayload.additionalPropertiesPayload.valuePayload? = nil,
                        _type: Components.Schemas.Record.fieldsPayload.additionalPropertiesPayload._typePayload? = nil
                    ) {
                        self.value = value
                        self._type = _type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case value
                        case _type = "type"
                    }
                }
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.Record.fieldsPayload.additionalPropertiesPayload]
                /// Creates a new `fieldsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.Record.fieldsPayload.additionalPropertiesPayload] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/Record/fields`.
            public var fields: Components.Schemas.Record.fieldsPayload?
            /// Creates a new `Record`.
            ///
            /// - Parameters:
            ///   - recordName:
            ///   - recordType:
            ///   - recordChangeTag:
            ///   - fields:
            public init(
                recordName: Swift.String? = nil,
                recordType: Swift.String? = nil,
                recordChangeTag: Swift.String? = nil,
                fields: Components.Schemas.Record.fieldsPayload? = nil
            ) {
                self.recordName = recordName
                self.recordType = recordType
                self.recordChangeTag = recordChangeTag
                self.fields = fields
            }
            public enum CodingKeys: String, CodingKey {
                case recordName
                case recordType
                case recordChangeTag
                case fields
            }
        }
        /// - Remark: Generated from `#/components/schemas/ZoneOperation`.
        public struct ZoneOperation: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ZoneOperation/operationType`.
            @frozen public enum operationTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case create = "create"
                case delete = "delete"
            }
            /// - Remark: Generated from `#/components/schemas/ZoneOperation/operationType`.
            public var operationType: Components.Schemas.ZoneOperation.operationTypePayload?
            /// - Remark: Generated from `#/components/schemas/ZoneOperation/zone`.
            public struct zonePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ZoneOperation/zone/zoneID`.
                public var zoneID: Components.Schemas.ZoneID?
                /// Creates a new `zonePayload`.
                ///
                /// - Parameters:
                ///   - zoneID:
                public init(zoneID: Components.Schemas.ZoneID? = nil) {
                    self.zoneID = zoneID
                }
                public enum CodingKeys: String, CodingKey {
                    case zoneID
                }
            }
            /// - Remark: Generated from `#/components/schemas/ZoneOperation/zone`.
            public var zone: Components.Schemas.ZoneOperation.zonePayload?
            /// Creates a new `ZoneOperation`.
            ///
            /// - Parameters:
            ///   - operationType:
            ///   - zone:
            public init(
                operationType: Components.Schemas.ZoneOperation.operationTypePayload? = nil,
                zone: Components.Schemas.ZoneOperation.zonePayload? = nil
            ) {
                self.operationType = operationType
                self.zone = zone
            }
            public enum CodingKeys: String, CodingKey {
                case operationType
                case zone
            }
        }
        /// - Remark: Generated from `#/components/schemas/SubscriptionOperation`.
        public struct SubscriptionOperation: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SubscriptionOperation/operationType`.
            @frozen public enum operationTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case create = "create"
                case update = "update"
                case delete = "delete"
            }
            /// - Remark: Generated from `#/components/schemas/SubscriptionOperation/operationType`.
            public var operationType: Components.Schemas.SubscriptionOperation.operationTypePayload?
            /// - Remark: Generated from `#/components/schemas/SubscriptionOperation/subscription`.
            public var subscription: Components.Schemas.Subscription?
            /// Creates a new `SubscriptionOperation`.
            ///
            /// - Parameters:
            ///   - operationType:
            ///   - subscription:
            public init(
                operationType: Components.Schemas.SubscriptionOperation.operationTypePayload? = nil,
                subscription: Components.Schemas.Subscription? = nil
            ) {
                self.operationType = operationType
                self.subscription = subscription
            }
            public enum CodingKeys: String, CodingKey {
                case operationType
                case subscription
            }
        }
        /// - Remark: Generated from `#/components/schemas/Subscription`.
        public struct Subscription: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Subscription/subscriptionID`.
            public var subscriptionID: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Subscription/subscriptionType`.
            @frozen public enum subscriptionTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case query = "query"
                case zone = "zone"
            }
            /// - Remark: Generated from `#/components/schemas/Subscription/subscriptionType`.
            public var subscriptionType: Components.Schemas.Subscription.subscriptionTypePayload?
            /// - Remark: Generated from `#/components/schemas/Subscription/query`.
            public var query: OpenAPIRuntime.OpenAPIObjectContainer?
            /// - Remark: Generated from `#/components/schemas/Subscription/zoneID`.
            public var zoneID: Components.Schemas.ZoneID?
            /// - Remark: Generated from `#/components/schemas/Subscription/firesOnPayload`.
            @frozen public enum firesOnPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case create = "create"
                case update = "update"
                case delete = "delete"
            }
            /// - Remark: Generated from `#/components/schemas/Subscription/firesOn`.
            public typealias firesOnPayload = [Components.Schemas.Subscription.firesOnPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/Subscription/firesOn`.
            public var firesOn: Components.Schemas.Subscription.firesOnPayload?
            /// Creates a new `Subscription`.
            ///
            /// - Parameters:
            ///   - subscriptionID:
            ///   - subscriptionType:
            ///   - query:
            ///   - zoneID:
            ///   - firesOn:
            public init(
                subscriptionID: Swift.String? = nil,
                subscriptionType: Components.Schemas.Subscription.subscriptionTypePayload? = nil,
                query: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                zoneID: Components.Schemas.ZoneID? = nil,
                firesOn: Components.Schemas.Subscription.firesOnPayload? = nil
            ) {
                self.subscriptionID = subscriptionID
                self.subscriptionType = subscriptionType
                self.query = query
                self.zoneID = zoneID
                self.firesOn = firesOn
            }
            public enum CodingKeys: String, CodingKey {
                case subscriptionID
                case subscriptionType
                case query
                case zoneID
                case firesOn
            }
        }
        /// - Remark: Generated from `#/components/schemas/QueryResponse`.
        public struct QueryResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/QueryResponse/records`.
            public var records: [Components.Schemas.Record]?
            /// - Remark: Generated from `#/components/schemas/QueryResponse/continuationMarker`.
            public var continuationMarker: Swift.String?
            /// Creates a new `QueryResponse`.
            ///
            /// - Parameters:
            ///   - records:
            ///   - continuationMarker:
            public init(
                records: [Components.Schemas.Record]? = nil,
                continuationMarker: Swift.String? = nil
            ) {
                self.records = records
                self.continuationMarker = continuationMarker
            }
            public enum CodingKeys: String, CodingKey {
                case records
                case continuationMarker
            }
        }
        /// - Remark: Generated from `#/components/schemas/ModifyResponse`.
        public struct ModifyResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ModifyResponse/records`.
            public var records: [Components.Schemas.Record]?
            /// Creates a new `ModifyResponse`.
            ///
            /// - Parameters:
            ///   - records:
            public init(records: [Components.Schemas.Record]? = nil) {
                self.records = records
            }
            public enum CodingKeys: String, CodingKey {
                case records
            }
        }
        /// - Remark: Generated from `#/components/schemas/LookupResponse`.
        public struct LookupResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LookupResponse/records`.
            public var records: [Components.Schemas.Record]?
            /// Creates a new `LookupResponse`.
            ///
            /// - Parameters:
            ///   - records:
            public init(records: [Components.Schemas.Record]? = nil) {
                self.records = records
            }
            public enum CodingKeys: String, CodingKey {
                case records
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChangesResponse`.
        public struct ChangesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChangesResponse/records`.
            public var records: [Components.Schemas.Record]?
            /// - Remark: Generated from `#/components/schemas/ChangesResponse/syncToken`.
            public var syncToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChangesResponse/moreComing`.
            public var moreComing: Swift.Bool?
            /// Creates a new `ChangesResponse`.
            ///
            /// - Parameters:
            ///   - records:
            ///   - syncToken:
            ///   - moreComing:
            public init(
                records: [Components.Schemas.Record]? = nil,
                syncToken: Swift.String? = nil,
                moreComing: Swift.Bool? = nil
            ) {
                self.records = records
                self.syncToken = syncToken
                self.moreComing = moreComing
            }
            public enum CodingKeys: String, CodingKey {
                case records
                case syncToken
                case moreComing
            }
        }
        /// - Remark: Generated from `#/components/schemas/ZonesListResponse`.
        public struct ZonesListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ZonesListResponse/zonesPayload`.
            public struct zonesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ZonesListResponse/zonesPayload/zoneID`.
                public var zoneID: Components.Schemas.ZoneID?
                /// Creates a new `zonesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - zoneID:
                public init(zoneID: Components.Schemas.ZoneID? = nil) {
                    self.zoneID = zoneID
                }
                public enum CodingKeys: String, CodingKey {
                    case zoneID
                }
            }
            /// - Remark: Generated from `#/components/schemas/ZonesListResponse/zones`.
            public typealias zonesPayload = [Components.Schemas.ZonesListResponse.zonesPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/ZonesListResponse/zones`.
            public var zones: Components.Schemas.ZonesListResponse.zonesPayload?
            /// Creates a new `ZonesListResponse`.
            ///
            /// - Parameters:
            ///   - zones:
            public init(zones: Components.Schemas.ZonesListResponse.zonesPayload? = nil) {
                self.zones = zones
            }
            public enum CodingKeys: String, CodingKey {
                case zones
            }
        }
        /// - Remark: Generated from `#/components/schemas/ZonesLookupResponse`.
        public struct ZonesLookupResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ZonesLookupResponse/zonesPayload`.
            public struct zonesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ZonesLookupResponse/zonesPayload/zoneID`.
                public var zoneID: Components.Schemas.ZoneID?
                /// Creates a new `zonesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - zoneID:
                public init(zoneID: Components.Schemas.ZoneID? = nil) {
                    self.zoneID = zoneID
                }
                public enum CodingKeys: String, CodingKey {
                    case zoneID
                }
            }
            /// - Remark: Generated from `#/components/schemas/ZonesLookupResponse/zones`.
            public typealias zonesPayload = [Components.Schemas.ZonesLookupResponse.zonesPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/ZonesLookupResponse/zones`.
            public var zones: Components.Schemas.ZonesLookupResponse.zonesPayload?
            /// Creates a new `ZonesLookupResponse`.
            ///
            /// - Parameters:
            ///   - zones:
            public init(zones: Components.Schemas.ZonesLookupResponse.zonesPayload? = nil) {
                self.zones = zones
            }
            public enum CodingKeys: String, CodingKey {
                case zones
            }
        }
        /// - Remark: Generated from `#/components/schemas/ZonesModifyResponse`.
        public struct ZonesModifyResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ZonesModifyResponse/zonesPayload`.
            public struct zonesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ZonesModifyResponse/zonesPayload/zoneID`.
                public var zoneID: Components.Schemas.ZoneID?
                /// Creates a new `zonesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - zoneID:
                public init(zoneID: Components.Schemas.ZoneID? = nil) {
                    self.zoneID = zoneID
                }
                public enum CodingKeys: String, CodingKey {
                    case zoneID
                }
            }
            /// - Remark: Generated from `#/components/schemas/ZonesModifyResponse/zones`.
            public typealias zonesPayload = [Components.Schemas.ZonesModifyResponse.zonesPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/ZonesModifyResponse/zones`.
            public var zones: Components.Schemas.ZonesModifyResponse.zonesPayload?
            /// Creates a new `ZonesModifyResponse`.
            ///
            /// - Parameters:
            ///   - zones:
            public init(zones: Components.Schemas.ZonesModifyResponse.zonesPayload? = nil) {
                self.zones = zones
            }
            public enum CodingKeys: String, CodingKey {
                case zones
            }
        }
        /// - Remark: Generated from `#/components/schemas/ZoneChangesResponse`.
        public struct ZoneChangesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ZoneChangesResponse/zonesPayload`.
            public struct zonesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ZoneChangesResponse/zonesPayload/zoneID`.
                public var zoneID: Components.Schemas.ZoneID?
                /// Creates a new `zonesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - zoneID:
                public init(zoneID: Components.Schemas.ZoneID? = nil) {
                    self.zoneID = zoneID
                }
                public enum CodingKeys: String, CodingKey {
                    case zoneID
                }
            }
            /// - Remark: Generated from `#/components/schemas/ZoneChangesResponse/zones`.
            public typealias zonesPayload = [Components.Schemas.ZoneChangesResponse.zonesPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/ZoneChangesResponse/zones`.
            public var zones: Components.Schemas.ZoneChangesResponse.zonesPayload?
            /// - Remark: Generated from `#/components/schemas/ZoneChangesResponse/syncToken`.
            public var syncToken: Swift.String?
            /// Creates a new `ZoneChangesResponse`.
            ///
            /// - Parameters:
            ///   - zones:
            ///   - syncToken:
            public init(
                zones: Components.Schemas.ZoneChangesResponse.zonesPayload? = nil,
                syncToken: Swift.String? = nil
            ) {
                self.zones = zones
                self.syncToken = syncToken
            }
            public enum CodingKeys: String, CodingKey {
                case zones
                case syncToken
            }
        }
        /// - Remark: Generated from `#/components/schemas/SubscriptionsListResponse`.
        public struct SubscriptionsListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SubscriptionsListResponse/subscriptions`.
            public var subscriptions: [Components.Schemas.Subscription]?
            /// Creates a new `SubscriptionsListResponse`.
            ///
            /// - Parameters:
            ///   - subscriptions:
            public init(subscriptions: [Components.Schemas.Subscription]? = nil) {
                self.subscriptions = subscriptions
            }
            public enum CodingKeys: String, CodingKey {
                case subscriptions
            }
        }
        /// - Remark: Generated from `#/components/schemas/SubscriptionsLookupResponse`.
        public struct SubscriptionsLookupResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SubscriptionsLookupResponse/subscriptions`.
            public var subscriptions: [Components.Schemas.Subscription]?
            /// Creates a new `SubscriptionsLookupResponse`.
            ///
            /// - Parameters:
            ///   - subscriptions:
            public init(subscriptions: [Components.Schemas.Subscription]? = nil) {
                self.subscriptions = subscriptions
            }
            public enum CodingKeys: String, CodingKey {
                case subscriptions
            }
        }
        /// - Remark: Generated from `#/components/schemas/SubscriptionsModifyResponse`.
        public struct SubscriptionsModifyResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SubscriptionsModifyResponse/subscriptions`.
            public var subscriptions: [Components.Schemas.Subscription]?
            /// Creates a new `SubscriptionsModifyResponse`.
            ///
            /// - Parameters:
            ///   - subscriptions:
            public init(subscriptions: [Components.Schemas.Subscription]? = nil) {
                self.subscriptions = subscriptions
            }
            public enum CodingKeys: String, CodingKey {
                case subscriptions
            }
        }
        /// - Remark: Generated from `#/components/schemas/UserResponse`.
        public struct UserResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UserResponse/userRecordName`.
            public var userRecordName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UserResponse/firstName`.
            public var firstName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UserResponse/lastName`.
            public var lastName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UserResponse/emailAddress`.
            public var emailAddress: Swift.String?
            /// Creates a new `UserResponse`.
            ///
            /// - Parameters:
            ///   - userRecordName:
            ///   - firstName:
            ///   - lastName:
            ///   - emailAddress:
            public init(
                userRecordName: Swift.String? = nil,
                firstName: Swift.String? = nil,
                lastName: Swift.String? = nil,
                emailAddress: Swift.String? = nil
            ) {
                self.userRecordName = userRecordName
                self.firstName = firstName
                self.lastName = lastName
                self.emailAddress = emailAddress
            }
            public enum CodingKeys: String, CodingKey {
                case userRecordName
                case firstName
                case lastName
                case emailAddress
            }
        }
        /// - Remark: Generated from `#/components/schemas/DiscoverResponse`.
        public struct DiscoverResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DiscoverResponse/usersPayload`.
            public struct usersPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/DiscoverResponse/usersPayload/userRecordName`.
                public var userRecordName: Swift.String?
                /// - Remark: Generated from `#/components/schemas/DiscoverResponse/usersPayload/firstName`.
                public var firstName: Swift.String?
                /// - Remark: Generated from `#/components/schemas/DiscoverResponse/usersPayload/lastName`.
                public var lastName: Swift.String?
                /// - Remark: Generated from `#/components/schemas/DiscoverResponse/usersPayload/emailAddress`.
                public var emailAddress: Swift.String?
                /// Creates a new `usersPayloadPayload`.
                ///
                /// - Parameters:
                ///   - userRecordName:
                ///   - firstName:
                ///   - lastName:
                ///   - emailAddress:
                public init(
                    userRecordName: Swift.String? = nil,
                    firstName: Swift.String? = nil,
                    lastName: Swift.String? = nil,
                    emailAddress: Swift.String? = nil
                ) {
                    self.userRecordName = userRecordName
                    self.firstName = firstName
                    self.lastName = lastName
                    self.emailAddress = emailAddress
                }
                public enum CodingKeys: String, CodingKey {
                    case userRecordName
                    case firstName
                    case lastName
                    case emailAddress
                }
            }
            /// - Remark: Generated from `#/components/schemas/DiscoverResponse/users`.
            public typealias usersPayload = [Components.Schemas.DiscoverResponse.usersPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/DiscoverResponse/users`.
            public var users: Components.Schemas.DiscoverResponse.usersPayload?
            /// Creates a new `DiscoverResponse`.
            ///
            /// - Parameters:
            ///   - users:
            public init(users: Components.Schemas.DiscoverResponse.usersPayload? = nil) {
                self.users = users
            }
            public enum CodingKeys: String, CodingKey {
                case users
            }
        }
        /// - Remark: Generated from `#/components/schemas/ContactsResponse`.
        public struct ContactsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ContactsResponse/contacts`.
            public var contacts: [OpenAPIRuntime.OpenAPIObjectContainer]?
            /// Creates a new `ContactsResponse`.
            ///
            /// - Parameters:
            ///   - contacts:
            public init(contacts: [OpenAPIRuntime.OpenAPIObjectContainer]? = nil) {
                self.contacts = contacts
            }
            public enum CodingKeys: String, CodingKey {
                case contacts
            }
        }
        /// - Remark: Generated from `#/components/schemas/AssetUploadResponse`.
        public struct AssetUploadResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AssetUploadResponse/tokensPayload`.
            public struct tokensPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AssetUploadResponse/tokensPayload/url`.
                public var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/AssetUploadResponse/tokensPayload/recordName`.
                public var recordName: Swift.String?
                /// - Remark: Generated from `#/components/schemas/AssetUploadResponse/tokensPayload/fieldName`.
                public var fieldName: Swift.String?
                /// Creates a new `tokensPayloadPayload`.
                ///
                /// - Parameters:
                ///   - url:
                ///   - recordName:
                ///   - fieldName:
                public init(
                    url: Swift.String? = nil,
                    recordName: Swift.String? = nil,
                    fieldName: Swift.String? = nil
                ) {
                    self.url = url
                    self.recordName = recordName
                    self.fieldName = fieldName
                }
                public enum CodingKeys: String, CodingKey {
                    case url
                    case recordName
                    case fieldName
                }
            }
            /// - Remark: Generated from `#/components/schemas/AssetUploadResponse/tokens`.
            public typealias tokensPayload = [Components.Schemas.AssetUploadResponse.tokensPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/AssetUploadResponse/tokens`.
            public var tokens: Components.Schemas.AssetUploadResponse.tokensPayload?
            /// Creates a new `AssetUploadResponse`.
            ///
            /// - Parameters:
            ///   - tokens:
            public init(tokens: Components.Schemas.AssetUploadResponse.tokensPayload? = nil) {
                self.tokens = tokens
            }
            public enum CodingKeys: String, CodingKey {
                case tokens
            }
        }
        /// - Remark: Generated from `#/components/schemas/TokenResponse`.
        public struct TokenResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TokenResponse/apnsToken`.
            public var apnsToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TokenResponse/webcAuthToken`.
            public var webcAuthToken: Swift.String?
            /// Creates a new `TokenResponse`.
            ///
            /// - Parameters:
            ///   - apnsToken:
            ///   - webcAuthToken:
            public init(
                apnsToken: Swift.String? = nil,
                webcAuthToken: Swift.String? = nil
            ) {
                self.apnsToken = apnsToken
                self.webcAuthToken = webcAuthToken
            }
            public enum CodingKeys: String, CodingKey {
                case apnsToken
                case webcAuthToken
            }
        }
        /// - Remark: Generated from `#/components/schemas/ErrorResponse`.
        public struct ErrorResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/uuid`.
            public var uuid: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/serverErrorCode`.
            public var serverErrorCode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/reason`.
            public var reason: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/redirectURL`.
            public var redirectURL: Swift.String?
            /// Creates a new `ErrorResponse`.
            ///
            /// - Parameters:
            ///   - uuid:
            ///   - serverErrorCode:
            ///   - reason:
            ///   - redirectURL:
            public init(
                uuid: Swift.String? = nil,
                serverErrorCode: Swift.String? = nil,
                reason: Swift.String? = nil,
                redirectURL: Swift.String? = nil
            ) {
                self.uuid = uuid
                self.serverErrorCode = serverErrorCode
                self.reason = reason
                self.redirectURL = redirectURL
            }
            public enum CodingKeys: String, CodingKey {
                case uuid
                case serverErrorCode
                case reason
                case redirectURL
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// Protocol version
        ///
        /// - Remark: Generated from `#/components/parameters/version`.
        public typealias version = Swift.String
        /// Container ID (begins with "iCloud.")
        ///
        /// - Remark: Generated from `#/components/parameters/container`.
        public typealias container = Swift.String
        /// Container environment
        ///
        /// - Remark: Generated from `#/components/parameters/environment`.
        @frozen public enum environment: String, Codable, Hashable, Sendable, CaseIterable {
            case development = "development"
            case production = "production"
        }
        /// Database scope
        ///
        /// - Remark: Generated from `#/components/parameters/database`.
        @frozen public enum database: String, Codable, Hashable, Sendable, CaseIterable {
            case _public = "public"
            case _private = "private"
            case shared = "shared"
        }
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct BadRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/BadRequest/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/BadRequest/content/application\/json`.
                case json(Components.Schemas.ErrorResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.ErrorResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.BadRequest.Body
            /// Creates a new `BadRequest`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.BadRequest.Body) {
                self.body = body
            }
        }
        public struct Unauthorized: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/Unauthorized/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/Unauthorized/content/application\/json`.
                case json(Components.Schemas.ErrorResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.ErrorResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.Unauthorized.Body
            /// Creates a new `Unauthorized`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.Unauthorized.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Query Records
    ///
    /// Fetch records using a query with filters and sorting options
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/records/query`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/query/post`.
    public enum post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_query {
        public static let id: Swift.String = "post/database/{version}/{container}/{environment}/{database}/records/query"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/path/version`.
                public var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/path/container`.
                public var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                @frozen public enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/path/environment`.
                public var environment: Components.Parameters.environment
                /// Database scope
                ///
                /// - Remark: Generated from `#/components/parameters/database`.
                @frozen public enum database: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case shared = "shared"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/path/database`.
                public var database: Components.Parameters.database
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                ///   - database:
                public init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment,
                    database: Components.Parameters.database
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                    self.database = database
                }
            }
            public var path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_query.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_query.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_query.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_query.Input.Headers
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/requestBody/json/zoneID`.
                    public var zoneID: Components.Schemas.ZoneID?
                    /// Maximum number of records to return
                    ///
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/requestBody/json/resultsLimit`.
                    public var resultsLimit: Swift.Int?
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/requestBody/json/query`.
                    public struct queryPayload: Codable, Hashable, Sendable {
                        /// The record type to query
                        ///
                        /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/requestBody/json/query/recordType`.
                        public var recordType: Swift.String?
                        /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/requestBody/json/query/filterBy`.
                        public var filterBy: [Components.Schemas.Filter]?
                        /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/requestBody/json/query/sortBy`.
                        public var sortBy: [Components.Schemas.Sort]?
                        /// Creates a new `queryPayload`.
                        ///
                        /// - Parameters:
                        ///   - recordType: The record type to query
                        ///   - filterBy:
                        ///   - sortBy:
                        public init(
                            recordType: Swift.String? = nil,
                            filterBy: [Components.Schemas.Filter]? = nil,
                            sortBy: [Components.Schemas.Sort]? = nil
                        ) {
                            self.recordType = recordType
                            self.filterBy = filterBy
                            self.sortBy = sortBy
                        }
                        public enum CodingKeys: String, CodingKey {
                            case recordType
                            case filterBy
                            case sortBy
                        }
                    }
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/requestBody/json/query`.
                    public var query: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_query.Input.Body.jsonPayload.queryPayload?
                    /// List of field names to return
                    ///
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/requestBody/json/desiredKeys`.
                    public var desiredKeys: [Swift.String]?
                    /// Marker for pagination
                    ///
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/requestBody/json/continuationMarker`.
                    public var continuationMarker: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - zoneID:
                    ///   - resultsLimit: Maximum number of records to return
                    ///   - query:
                    ///   - desiredKeys: List of field names to return
                    ///   - continuationMarker: Marker for pagination
                    public init(
                        zoneID: Components.Schemas.ZoneID? = nil,
                        resultsLimit: Swift.Int? = nil,
                        query: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_query.Input.Body.jsonPayload.queryPayload? = nil,
                        desiredKeys: [Swift.String]? = nil,
                        continuationMarker: Swift.String? = nil
                    ) {
                        self.zoneID = zoneID
                        self.resultsLimit = resultsLimit
                        self.query = query
                        self.desiredKeys = desiredKeys
                        self.continuationMarker = continuationMarker
                    }
                    public enum CodingKeys: String, CodingKey {
                        case zoneID
                        case resultsLimit
                        case query
                        case desiredKeys
                        case continuationMarker
                    }
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_query.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_query.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_query.Input.Path,
                headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_query.Input.Headers = .init(),
                body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_query.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.QueryResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.QueryResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_query.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_query.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful query
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/query/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_query.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_query.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/query/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/query/post/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Modify Records
    ///
    /// Create, update, or delete records (supports bulk operations)
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/records/modify`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/modify/post`.
    public enum post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_modify {
        public static let id: Swift.String = "post/database/{version}/{container}/{environment}/{database}/records/modify"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/modify/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/modify/POST/path/version`.
                public var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/modify/POST/path/container`.
                public var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                @frozen public enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/modify/POST/path/environment`.
                public var environment: Components.Parameters.environment
                /// Database scope
                ///
                /// - Remark: Generated from `#/components/parameters/database`.
                @frozen public enum database: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case shared = "shared"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/modify/POST/path/database`.
                public var database: Components.Parameters.database
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                ///   - database:
                public init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment,
                    database: Components.Parameters.database
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                    self.database = database
                }
            }
            public var path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_modify.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/modify/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_modify.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_modify.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_modify.Input.Headers
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/modify/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/modify/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/modify/POST/requestBody/json/operations`.
                    public var operations: [Components.Schemas.RecordOperation]?
                    /// If true, all operations must succeed or all fail
                    ///
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/modify/POST/requestBody/json/atomic`.
                    public var atomic: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - operations:
                    ///   - atomic: If true, all operations must succeed or all fail
                    public init(
                        operations: [Components.Schemas.RecordOperation]? = nil,
                        atomic: Swift.Bool? = nil
                    ) {
                        self.operations = operations
                        self.atomic = atomic
                    }
                    public enum CodingKeys: String, CodingKey {
                        case operations
                        case atomic
                    }
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/modify/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_modify.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_modify.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_modify.Input.Path,
                headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_modify.Input.Headers = .init(),
                body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_modify.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/modify/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/modify/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ModifyResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ModifyResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_modify.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_modify.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Records modified successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/modify/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_modify.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_modify.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/modify/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/modify/post/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Lookup Records
    ///
    /// Fetch specific records by their IDs
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/records/lookup`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/lookup/post`.
    public enum post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_lookup {
        public static let id: Swift.String = "post/database/{version}/{container}/{environment}/{database}/records/lookup"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/lookup/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/lookup/POST/path/version`.
                public var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/lookup/POST/path/container`.
                public var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                @frozen public enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/lookup/POST/path/environment`.
                public var environment: Components.Parameters.environment
                /// Database scope
                ///
                /// - Remark: Generated from `#/components/parameters/database`.
                @frozen public enum database: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case shared = "shared"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/lookup/POST/path/database`.
                public var database: Components.Parameters.database
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                ///   - database:
                public init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment,
                    database: Components.Parameters.database
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                    self.database = database
                }
            }
            public var path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_lookup.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/lookup/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_lookup.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_lookup.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_lookup.Input.Headers
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/lookup/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/lookup/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/lookup/POST/requestBody/json/recordsPayload`.
                    public struct recordsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/lookup/POST/requestBody/json/recordsPayload/recordName`.
                        public var recordName: Swift.String?
                        /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/lookup/POST/requestBody/json/recordsPayload/desiredKeys`.
                        public var desiredKeys: [Swift.String]?
                        /// Creates a new `recordsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - recordName:
                        ///   - desiredKeys:
                        public init(
                            recordName: Swift.String? = nil,
                            desiredKeys: [Swift.String]? = nil
                        ) {
                            self.recordName = recordName
                            self.desiredKeys = desiredKeys
                        }
                        public enum CodingKeys: String, CodingKey {
                            case recordName
                            case desiredKeys
                        }
                    }
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/lookup/POST/requestBody/json/records`.
                    public typealias recordsPayload = [Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_lookup.Input.Body.jsonPayload.recordsPayloadPayload]
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/lookup/POST/requestBody/json/records`.
                    public var records: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_lookup.Input.Body.jsonPayload.recordsPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - records:
                    public init(records: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_lookup.Input.Body.jsonPayload.recordsPayload? = nil) {
                        self.records = records
                    }
                    public enum CodingKeys: String, CodingKey {
                        case records
                    }
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/lookup/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_lookup.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_lookup.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_lookup.Input.Path,
                headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_lookup.Input.Headers = .init(),
                body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_lookup.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/lookup/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/lookup/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.LookupResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.LookupResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_lookup.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_lookup.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Records retrieved successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/lookup/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_lookup.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_lookup.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/lookup/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/lookup/post/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Fetch Record Changes
    ///
    /// Get all record changes relative to a sync token
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/records/changes`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/changes/post`.
    public enum post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_changes {
        public static let id: Swift.String = "post/database/{version}/{container}/{environment}/{database}/records/changes"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/changes/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/changes/POST/path/version`.
                public var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/changes/POST/path/container`.
                public var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                @frozen public enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/changes/POST/path/environment`.
                public var environment: Components.Parameters.environment
                /// Database scope
                ///
                /// - Remark: Generated from `#/components/parameters/database`.
                @frozen public enum database: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case shared = "shared"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/changes/POST/path/database`.
                public var database: Components.Parameters.database
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                ///   - database:
                public init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment,
                    database: Components.Parameters.database
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                    self.database = database
                }
            }
            public var path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_changes.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/changes/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_changes.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_changes.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_changes.Input.Headers
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/changes/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/changes/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/changes/POST/requestBody/json/zoneID`.
                    public var zoneID: Components.Schemas.ZoneID?
                    /// Token from previous sync operation
                    ///
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/changes/POST/requestBody/json/syncToken`.
                    public var syncToken: Swift.String?
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/changes/POST/requestBody/json/resultsLimit`.
                    public var resultsLimit: Swift.Int?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - zoneID:
                    ///   - syncToken: Token from previous sync operation
                    ///   - resultsLimit:
                    public init(
                        zoneID: Components.Schemas.ZoneID? = nil,
                        syncToken: Swift.String? = nil,
                        resultsLimit: Swift.Int? = nil
                    ) {
                        self.zoneID = zoneID
                        self.syncToken = syncToken
                        self.resultsLimit = resultsLimit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case zoneID
                        case syncToken
                        case resultsLimit
                    }
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/changes/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_changes.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_changes.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_changes.Input.Path,
                headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_changes.Input.Headers = .init(),
                body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_changes.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/changes/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/changes/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ChangesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ChangesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_changes.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_changes.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Changes retrieved successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/changes/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_changes.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_records_sol_changes.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/changes/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/changes/post/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List All Zones
    ///
    /// Fetch all zones in the database
    ///
    /// - Remark: HTTP `GET /database/{version}/{container}/{environment}/{database}/zones/list`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/list/get`.
    public enum get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_list {
        public static let id: Swift.String = "get/database/{version}/{container}/{environment}/{database}/zones/list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/list/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/list/GET/path/version`.
                public var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/list/GET/path/container`.
                public var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                @frozen public enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/list/GET/path/environment`.
                public var environment: Components.Parameters.environment
                /// Database scope
                ///
                /// - Remark: Generated from `#/components/parameters/database`.
                @frozen public enum database: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case shared = "shared"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/list/GET/path/database`.
                public var database: Components.Parameters.database
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                ///   - database:
                public init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment,
                    database: Components.Parameters.database
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                    self.database = database
                }
            }
            public var path: Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_list.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_list.Input.Path,
                headers: Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_list.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/list/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ZonesListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ZonesListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Zones retrieved successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/list/get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/list/get/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/list/get/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Lookup Zones
    ///
    /// Fetch specific zones by their IDs
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/zones/lookup`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/lookup/post`.
    public enum post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_lookup {
        public static let id: Swift.String = "post/database/{version}/{container}/{environment}/{database}/zones/lookup"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/lookup/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/lookup/POST/path/version`.
                public var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/lookup/POST/path/container`.
                public var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                @frozen public enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/lookup/POST/path/environment`.
                public var environment: Components.Parameters.environment
                /// Database scope
                ///
                /// - Remark: Generated from `#/components/parameters/database`.
                @frozen public enum database: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case shared = "shared"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/lookup/POST/path/database`.
                public var database: Components.Parameters.database
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                ///   - database:
                public init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment,
                    database: Components.Parameters.database
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                    self.database = database
                }
            }
            public var path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_lookup.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/lookup/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_lookup.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_lookup.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_lookup.Input.Headers
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/lookup/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/lookup/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/lookup/POST/requestBody/json/zones`.
                    public var zones: [Components.Schemas.ZoneID]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - zones:
                    public init(zones: [Components.Schemas.ZoneID]? = nil) {
                        self.zones = zones
                    }
                    public enum CodingKeys: String, CodingKey {
                        case zones
                    }
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/lookup/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_lookup.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_lookup.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_lookup.Input.Path,
                headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_lookup.Input.Headers = .init(),
                body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_lookup.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/lookup/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/lookup/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ZonesLookupResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ZonesLookupResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_lookup.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_lookup.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Zones retrieved successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/lookup/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_lookup.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_lookup.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/lookup/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/lookup/post/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Modify Zones
    ///
    /// Create or delete zones (only supported in private database)
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/zones/modify`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/modify/post`.
    public enum post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_modify {
        public static let id: Swift.String = "post/database/{version}/{container}/{environment}/{database}/zones/modify"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/modify/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/modify/POST/path/version`.
                public var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/modify/POST/path/container`.
                public var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                @frozen public enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/modify/POST/path/environment`.
                public var environment: Components.Parameters.environment
                /// Database scope
                ///
                /// - Remark: Generated from `#/components/parameters/database`.
                @frozen public enum database: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case shared = "shared"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/modify/POST/path/database`.
                public var database: Components.Parameters.database
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                ///   - database:
                public init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment,
                    database: Components.Parameters.database
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                    self.database = database
                }
            }
            public var path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_modify.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/modify/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_modify.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_modify.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_modify.Input.Headers
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/modify/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/modify/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/modify/POST/requestBody/json/operations`.
                    public var operations: [Components.Schemas.ZoneOperation]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - operations:
                    public init(operations: [Components.Schemas.ZoneOperation]? = nil) {
                        self.operations = operations
                    }
                    public enum CodingKeys: String, CodingKey {
                        case operations
                    }
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/modify/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_modify.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_modify.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_modify.Input.Path,
                headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_modify.Input.Headers = .init(),
                body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_modify.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/modify/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/modify/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ZonesModifyResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ZonesModifyResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_modify.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_modify.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Zones modified successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/modify/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_modify.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_modify.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/modify/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/modify/post/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Fetch Zone Changes
    ///
    /// Get all changed zones relative to a meta-sync token
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/zones/changes`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/changes/post`.
    public enum post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_changes {
        public static let id: Swift.String = "post/database/{version}/{container}/{environment}/{database}/zones/changes"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/changes/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/changes/POST/path/version`.
                public var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/changes/POST/path/container`.
                public var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                @frozen public enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/changes/POST/path/environment`.
                public var environment: Components.Parameters.environment
                /// Database scope
                ///
                /// - Remark: Generated from `#/components/parameters/database`.
                @frozen public enum database: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case shared = "shared"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/changes/POST/path/database`.
                public var database: Components.Parameters.database
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                ///   - database:
                public init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment,
                    database: Components.Parameters.database
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                    self.database = database
                }
            }
            public var path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_changes.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/changes/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_changes.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_changes.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_changes.Input.Headers
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/changes/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/changes/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Meta-sync token from previous operation
                    ///
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/changes/POST/requestBody/json/syncToken`.
                    public var syncToken: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - syncToken: Meta-sync token from previous operation
                    public init(syncToken: Swift.String? = nil) {
                        self.syncToken = syncToken
                    }
                    public enum CodingKeys: String, CodingKey {
                        case syncToken
                    }
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/changes/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_changes.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_changes.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_changes.Input.Path,
                headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_changes.Input.Headers = .init(),
                body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_changes.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/changes/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/changes/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ZoneChangesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ZoneChangesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_changes.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_changes.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Zone changes retrieved successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/changes/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_changes.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_zones_sol_changes.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/changes/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/changes/post/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List All Subscriptions
    ///
    /// Fetch all subscriptions in the database
    ///
    /// - Remark: HTTP `GET /database/{version}/{container}/{environment}/{database}/subscriptions/list`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/list/get`.
    public enum get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_list {
        public static let id: Swift.String = "get/database/{version}/{container}/{environment}/{database}/subscriptions/list"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/list/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/list/GET/path/version`.
                public var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/list/GET/path/container`.
                public var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                @frozen public enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/list/GET/path/environment`.
                public var environment: Components.Parameters.environment
                /// Database scope
                ///
                /// - Remark: Generated from `#/components/parameters/database`.
                @frozen public enum database: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case shared = "shared"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/list/GET/path/database`.
                public var database: Components.Parameters.database
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                ///   - database:
                public init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment,
                    database: Components.Parameters.database
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                    self.database = database
                }
            }
            public var path: Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_list.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_list.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_list.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_list.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_list.Input.Path,
                headers: Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_list.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/list/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.SubscriptionsListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SubscriptionsListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_list.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_list.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Subscriptions retrieved successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/list/get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_list.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_list.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/list/get/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/list/get/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Lookup Subscriptions
    ///
    /// Fetch specific subscriptions by their IDs
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/subscriptions/lookup`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/lookup/post`.
    public enum post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_lookup {
        public static let id: Swift.String = "post/database/{version}/{container}/{environment}/{database}/subscriptions/lookup"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/lookup/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/lookup/POST/path/version`.
                public var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/lookup/POST/path/container`.
                public var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                @frozen public enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/lookup/POST/path/environment`.
                public var environment: Components.Parameters.environment
                /// Database scope
                ///
                /// - Remark: Generated from `#/components/parameters/database`.
                @frozen public enum database: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case shared = "shared"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/lookup/POST/path/database`.
                public var database: Components.Parameters.database
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                ///   - database:
                public init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment,
                    database: Components.Parameters.database
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                    self.database = database
                }
            }
            public var path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_lookup.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/lookup/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_lookup.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_lookup.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_lookup.Input.Headers
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/lookup/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/lookup/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/lookup/POST/requestBody/json/subscriptionsPayload`.
                    public struct subscriptionsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/lookup/POST/requestBody/json/subscriptionsPayload/subscriptionID`.
                        public var subscriptionID: Swift.String?
                        /// Creates a new `subscriptionsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - subscriptionID:
                        public init(subscriptionID: Swift.String? = nil) {
                            self.subscriptionID = subscriptionID
                        }
                        public enum CodingKeys: String, CodingKey {
                            case subscriptionID
                        }
                    }
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/lookup/POST/requestBody/json/subscriptions`.
                    public typealias subscriptionsPayload = [Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_lookup.Input.Body.jsonPayload.subscriptionsPayloadPayload]
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/lookup/POST/requestBody/json/subscriptions`.
                    public var subscriptions: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_lookup.Input.Body.jsonPayload.subscriptionsPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - subscriptions:
                    public init(subscriptions: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_lookup.Input.Body.jsonPayload.subscriptionsPayload? = nil) {
                        self.subscriptions = subscriptions
                    }
                    public enum CodingKeys: String, CodingKey {
                        case subscriptions
                    }
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/lookup/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_lookup.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_lookup.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_lookup.Input.Path,
                headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_lookup.Input.Headers = .init(),
                body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_lookup.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/lookup/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/lookup/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.SubscriptionsLookupResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SubscriptionsLookupResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_lookup.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_lookup.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Subscriptions retrieved successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/lookup/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_lookup.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_lookup.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/lookup/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/lookup/post/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Modify Subscriptions
    ///
    /// Create, update, or delete subscriptions
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/subscriptions/modify`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/modify/post`.
    public enum post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_modify {
        public static let id: Swift.String = "post/database/{version}/{container}/{environment}/{database}/subscriptions/modify"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/modify/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/modify/POST/path/version`.
                public var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/modify/POST/path/container`.
                public var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                @frozen public enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/modify/POST/path/environment`.
                public var environment: Components.Parameters.environment
                /// Database scope
                ///
                /// - Remark: Generated from `#/components/parameters/database`.
                @frozen public enum database: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case shared = "shared"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/modify/POST/path/database`.
                public var database: Components.Parameters.database
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                ///   - database:
                public init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment,
                    database: Components.Parameters.database
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                    self.database = database
                }
            }
            public var path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_modify.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/modify/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_modify.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_modify.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_modify.Input.Headers
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/modify/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/modify/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/modify/POST/requestBody/json/operations`.
                    public var operations: [Components.Schemas.SubscriptionOperation]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - operations:
                    public init(operations: [Components.Schemas.SubscriptionOperation]? = nil) {
                        self.operations = operations
                    }
                    public enum CodingKeys: String, CodingKey {
                        case operations
                    }
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/modify/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_modify.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_modify.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_modify.Input.Path,
                headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_modify.Input.Headers = .init(),
                body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_modify.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/modify/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/modify/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.SubscriptionsModifyResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SubscriptionsModifyResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_modify.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_modify.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Subscriptions modified successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/modify/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_modify.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_subscriptions_sol_modify.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/modify/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/modify/post/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get Current User
    ///
    /// Fetch the current authenticated user's information
    ///
    /// - Remark: HTTP `GET /database/{version}/{container}/{environment}/public/users/current`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/public/users/current/get`.
    public enum get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_current {
        public static let id: Swift.String = "get/database/{version}/{container}/{environment}/public/users/current"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/current/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/current/GET/path/version`.
                public var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/current/GET/path/container`.
                public var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                @frozen public enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/current/GET/path/environment`.
                public var environment: Components.Parameters.environment
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                public init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                }
            }
            public var path: Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_current.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/current/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_current.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_current.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_current.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_current.Input.Path,
                headers: Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_current.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/current/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/current/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.UserResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UserResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_current.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_current.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// User information retrieved successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/public/users/current/get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_current.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.get_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_current.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/public/users/current/get/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Discover User Identities
    ///
    /// Discover all user identities based on email addresses or user record names
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/public/users/discover`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/public/users/discover/post`.
    public enum post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_discover {
        public static let id: Swift.String = "post/database/{version}/{container}/{environment}/public/users/discover"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/discover/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/discover/POST/path/version`.
                public var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/discover/POST/path/container`.
                public var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                @frozen public enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/discover/POST/path/environment`.
                public var environment: Components.Parameters.environment
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                public init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                }
            }
            public var path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_discover.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/discover/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_discover.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_discover.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_discover.Input.Headers
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/discover/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/discover/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/discover/POST/requestBody/json/usersPayload`.
                    public struct usersPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/discover/POST/requestBody/json/usersPayload/emailAddress`.
                        public var emailAddress: Swift.String?
                        /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/discover/POST/requestBody/json/usersPayload/userRecordName`.
                        public var userRecordName: Swift.String?
                        /// Creates a new `usersPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - emailAddress:
                        ///   - userRecordName:
                        public init(
                            emailAddress: Swift.String? = nil,
                            userRecordName: Swift.String? = nil
                        ) {
                            self.emailAddress = emailAddress
                            self.userRecordName = userRecordName
                        }
                        public enum CodingKeys: String, CodingKey {
                            case emailAddress
                            case userRecordName
                        }
                    }
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/discover/POST/requestBody/json/users`.
                    public typealias usersPayload = [Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_discover.Input.Body.jsonPayload.usersPayloadPayload]
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/discover/POST/requestBody/json/users`.
                    public var users: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_discover.Input.Body.jsonPayload.usersPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - users:
                    public init(users: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_discover.Input.Body.jsonPayload.usersPayload? = nil) {
                        self.users = users
                    }
                    public enum CodingKeys: String, CodingKey {
                        case users
                    }
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/discover/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_discover.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_discover.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_discover.Input.Path,
                headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_discover.Input.Headers = .init(),
                body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_discover.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/discover/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/discover/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.DiscoverResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DiscoverResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_discover.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_discover.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// User identities discovered successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/public/users/discover/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_discover.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_discover.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/public/users/discover/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/public/users/discover/post/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Lookup Contacts (Deprecated)
    ///
    /// Fetch contacts (This endpoint is deprecated)
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/public/users/lookup/contacts`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/public/users/lookup/contacts/post`.
    public enum post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_lookup_sol_contacts {
        public static let id: Swift.String = "post/database/{version}/{container}/{environment}/public/users/lookup/contacts"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/lookup/contacts/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/lookup/contacts/POST/path/version`.
                public var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/lookup/contacts/POST/path/container`.
                public var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                @frozen public enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/lookup/contacts/POST/path/environment`.
                public var environment: Components.Parameters.environment
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                public init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                }
            }
            public var path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_lookup_sol_contacts.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/lookup/contacts/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_lookup_sol_contacts.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_lookup_sol_contacts.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_lookup_sol_contacts.Input.Headers
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/lookup/contacts/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/lookup/contacts/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/lookup/contacts/POST/requestBody/json/contacts`.
                    public var contacts: [OpenAPIRuntime.OpenAPIObjectContainer]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - contacts:
                    public init(contacts: [OpenAPIRuntime.OpenAPIObjectContainer]? = nil) {
                        self.contacts = contacts
                    }
                    public enum CodingKeys: String, CodingKey {
                        case contacts
                    }
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/lookup/contacts/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_lookup_sol_contacts.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_lookup_sol_contacts.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_lookup_sol_contacts.Input.Path,
                headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_lookup_sol_contacts.Input.Headers = .init(),
                body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_lookup_sol_contacts.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/lookup/contacts/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/public/users/lookup/contacts/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ContactsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ContactsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_lookup_sol_contacts.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_lookup_sol_contacts.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Contacts retrieved successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/public/users/lookup/contacts/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_lookup_sol_contacts.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol_public_sol_users_sol_lookup_sol_contacts.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/public/users/lookup/contacts/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/public/users/lookup/contacts/post/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Upload Assets
    ///
    /// Upload binary assets to CloudKit
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/assets/upload`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/assets/upload/post`.
    public enum post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_assets_sol_upload {
        public static let id: Swift.String = "post/database/{version}/{container}/{environment}/{database}/assets/upload"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/assets/upload/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/assets/upload/POST/path/version`.
                public var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/assets/upload/POST/path/container`.
                public var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                @frozen public enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/assets/upload/POST/path/environment`.
                public var environment: Components.Parameters.environment
                /// Database scope
                ///
                /// - Remark: Generated from `#/components/parameters/database`.
                @frozen public enum database: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case shared = "shared"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/assets/upload/POST/path/database`.
                public var database: Components.Parameters.database
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                ///   - database:
                public init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment,
                    database: Components.Parameters.database
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                    self.database = database
                }
            }
            public var path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_assets_sol_upload.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/assets/upload/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_assets_sol_upload.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_assets_sol_upload.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_assets_sol_upload.Input.Headers
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/assets/upload/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/assets/upload/POST/requestBody/multipartForm`.
                @frozen public enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/assets/upload/POST/requestBody/multipartForm/file`.
                    public struct filePayload: Sendable, Hashable {
                        public var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `filePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        public init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case file(OpenAPIRuntime.MultipartPart<Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_assets_sol_upload.Input.Body.multipartFormPayload.filePayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/assets/upload/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_assets_sol_upload.Input.Body.multipartFormPayload>)
            }
            public var body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_assets_sol_upload.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_assets_sol_upload.Input.Path,
                headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_assets_sol_upload.Input.Headers = .init(),
                body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_assets_sol_upload.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/assets/upload/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/assets/upload/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AssetUploadResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AssetUploadResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_assets_sol_upload.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_assets_sol_upload.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Asset uploaded successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/assets/upload/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_assets_sol_upload.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_assets_sol_upload.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/assets/upload/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/assets/upload/post/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create APNs Token
    ///
    /// Create an Apple Push Notification service (APNs) token
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/tokens/create`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/tokens/create/post`.
    public enum post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_create {
        public static let id: Swift.String = "post/database/{version}/{container}/{environment}/{database}/tokens/create"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/create/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/create/POST/path/version`.
                public var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/create/POST/path/container`.
                public var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                @frozen public enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/create/POST/path/environment`.
                public var environment: Components.Parameters.environment
                /// Database scope
                ///
                /// - Remark: Generated from `#/components/parameters/database`.
                @frozen public enum database: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case shared = "shared"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/create/POST/path/database`.
                public var database: Components.Parameters.database
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                ///   - database:
                public init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment,
                    database: Components.Parameters.database
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                    self.database = database
                }
            }
            public var path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_create.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/create/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_create.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_create.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_create.Input.Headers
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/create/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/create/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/create/POST/requestBody/json/apnsEnvironment`.
                    @frozen public enum apnsEnvironmentPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case development = "development"
                        case production = "production"
                    }
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/create/POST/requestBody/json/apnsEnvironment`.
                    public var apnsEnvironment: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_create.Input.Body.jsonPayload.apnsEnvironmentPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - apnsEnvironment:
                    public init(apnsEnvironment: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_create.Input.Body.jsonPayload.apnsEnvironmentPayload? = nil) {
                        self.apnsEnvironment = apnsEnvironment
                    }
                    public enum CodingKeys: String, CodingKey {
                        case apnsEnvironment
                    }
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/create/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_create.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_create.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_create.Input.Path,
                headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_create.Input.Headers = .init(),
                body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_create.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/create/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/create/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.TokenResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TokenResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_create.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_create.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Token created successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/tokens/create/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_create.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_create.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/tokens/create/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/tokens/create/post/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Register Token
    ///
    /// Register a token for push notifications
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/tokens/register`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/tokens/register/post`.
    public enum post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_register {
        public static let id: Swift.String = "post/database/{version}/{container}/{environment}/{database}/tokens/register"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/register/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/register/POST/path/version`.
                public var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/register/POST/path/container`.
                public var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                @frozen public enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/register/POST/path/environment`.
                public var environment: Components.Parameters.environment
                /// Database scope
                ///
                /// - Remark: Generated from `#/components/parameters/database`.
                @frozen public enum database: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case shared = "shared"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/register/POST/path/database`.
                public var database: Components.Parameters.database
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                ///   - database:
                public init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment,
                    database: Components.Parameters.database
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                    self.database = database
                }
            }
            public var path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_register.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/register/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_register.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_register.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_register.Input.Headers
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/register/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/register/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// The APNs token to register
                    ///
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/register/POST/requestBody/json/apnsToken`.
                    public var apnsToken: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - apnsToken: The APNs token to register
                    public init(apnsToken: Swift.String? = nil) {
                        self.apnsToken = apnsToken
                    }
                    public enum CodingKeys: String, CodingKey {
                        case apnsToken
                    }
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/register/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_register.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_register.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_register.Input.Path,
                headers: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_register.Input.Headers = .init(),
                body: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_register.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// Token registered successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/tokens/register/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_register.Output.Ok)
            /// Token registered successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/tokens/register/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            public static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_database_sol__lcub_version_rcub__sol__lcub_container_rcub__sol__lcub_environment_rcub__sol__lcub_database_rcub__sol_tokens_sol_register.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/tokens/register/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/tokens/register/post/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
