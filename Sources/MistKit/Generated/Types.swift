// Generated by swift-openapi-generator, do not modify.
// periphery:ignore:all
// swift-format-ignore-file
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
internal protocol APIProtocol: Sendable {
    /// Query Records
    ///
    /// Fetch records using a query with filters and sorting options
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/records/query`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/query/post(queryRecords)`.
    func queryRecords(_ input: Operations.queryRecords.Input) async throws -> Operations.queryRecords.Output
    /// Modify Records
    ///
    /// Create, update, or delete records (supports bulk operations)
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/records/modify`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/modify/post(modifyRecords)`.
    func modifyRecords(_ input: Operations.modifyRecords.Input) async throws -> Operations.modifyRecords.Output
    /// Lookup Records
    ///
    /// Fetch specific records by their IDs
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/records/lookup`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/lookup/post(lookupRecords)`.
    func lookupRecords(_ input: Operations.lookupRecords.Input) async throws -> Operations.lookupRecords.Output
    /// Fetch Record Changes
    ///
    /// Get all record changes relative to a sync token
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/records/changes`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/changes/post(fetchRecordChanges)`.
    func fetchRecordChanges(_ input: Operations.fetchRecordChanges.Input) async throws -> Operations.fetchRecordChanges.Output
    /// List All Zones
    ///
    /// Fetch all zones in the database
    ///
    /// - Remark: HTTP `GET /database/{version}/{container}/{environment}/{database}/zones/list`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/list/get(listZones)`.
    func listZones(_ input: Operations.listZones.Input) async throws -> Operations.listZones.Output
    /// Lookup Zones
    ///
    /// Fetch specific zones by their IDs
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/zones/lookup`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/lookup/post(lookupZones)`.
    func lookupZones(_ input: Operations.lookupZones.Input) async throws -> Operations.lookupZones.Output
    /// Modify Zones
    ///
    /// Create or delete zones (only supported in private database)
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/zones/modify`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/modify/post(modifyZones)`.
    func modifyZones(_ input: Operations.modifyZones.Input) async throws -> Operations.modifyZones.Output
    /// Fetch Zone Changes
    ///
    /// Get all changed zones relative to a meta-sync token
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/zones/changes`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/changes/post(fetchZoneChanges)`.
    func fetchZoneChanges(_ input: Operations.fetchZoneChanges.Input) async throws -> Operations.fetchZoneChanges.Output
    /// List All Subscriptions
    ///
    /// Fetch all subscriptions in the database
    ///
    /// - Remark: HTTP `GET /database/{version}/{container}/{environment}/{database}/subscriptions/list`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/list/get(listSubscriptions)`.
    func listSubscriptions(_ input: Operations.listSubscriptions.Input) async throws -> Operations.listSubscriptions.Output
    /// Lookup Subscriptions
    ///
    /// Fetch specific subscriptions by their IDs
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/subscriptions/lookup`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/lookup/post(lookupSubscriptions)`.
    func lookupSubscriptions(_ input: Operations.lookupSubscriptions.Input) async throws -> Operations.lookupSubscriptions.Output
    /// Modify Subscriptions
    ///
    /// Create, update, or delete subscriptions
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/subscriptions/modify`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/modify/post(modifySubscriptions)`.
    func modifySubscriptions(_ input: Operations.modifySubscriptions.Input) async throws -> Operations.modifySubscriptions.Output
    /// Get Current User
    ///
    /// Fetch the current authenticated user's information
    ///
    /// - Remark: HTTP `GET /database/{version}/{container}/{environment}/{database}/users/current`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/users/current/get(getCurrentUser)`.
    func getCurrentUser(_ input: Operations.getCurrentUser.Input) async throws -> Operations.getCurrentUser.Output
    /// Discover User Identities
    ///
    /// Discover all user identities based on email addresses or user record names
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/users/discover`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/users/discover/post(discoverUserIdentities)`.
    func discoverUserIdentities(_ input: Operations.discoverUserIdentities.Input) async throws -> Operations.discoverUserIdentities.Output
    /// Lookup Contacts (Deprecated)
    ///
    /// Fetch contacts (This endpoint is deprecated)
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/users/lookup/contacts`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/users/lookup/contacts/post(lookupContacts)`.
    @available(*, deprecated)
    func lookupContacts(_ input: Operations.lookupContacts.Input) async throws -> Operations.lookupContacts.Output
    /// Upload Assets
    ///
    /// Upload binary assets to CloudKit
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/assets/upload`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/assets/upload/post(uploadAssets)`.
    func uploadAssets(_ input: Operations.uploadAssets.Input) async throws -> Operations.uploadAssets.Output
    /// Create APNs Token
    ///
    /// Create an Apple Push Notification service (APNs) token
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/tokens/create`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/tokens/create/post(createToken)`.
    func createToken(_ input: Operations.createToken.Input) async throws -> Operations.createToken.Output
    /// Register Token
    ///
    /// Register a token for push notifications
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/tokens/register`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/tokens/register/post(registerToken)`.
    func registerToken(_ input: Operations.registerToken.Input) async throws -> Operations.registerToken.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Query Records
    ///
    /// Fetch records using a query with filters and sorting options
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/records/query`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/query/post(queryRecords)`.
    internal func queryRecords(
        path: Operations.queryRecords.Input.Path,
        headers: Operations.queryRecords.Input.Headers = .init(),
        body: Operations.queryRecords.Input.Body
    ) async throws -> Operations.queryRecords.Output {
        try await queryRecords(Operations.queryRecords.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Modify Records
    ///
    /// Create, update, or delete records (supports bulk operations)
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/records/modify`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/modify/post(modifyRecords)`.
    internal func modifyRecords(
        path: Operations.modifyRecords.Input.Path,
        headers: Operations.modifyRecords.Input.Headers = .init(),
        body: Operations.modifyRecords.Input.Body
    ) async throws -> Operations.modifyRecords.Output {
        try await modifyRecords(Operations.modifyRecords.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Lookup Records
    ///
    /// Fetch specific records by their IDs
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/records/lookup`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/lookup/post(lookupRecords)`.
    internal func lookupRecords(
        path: Operations.lookupRecords.Input.Path,
        headers: Operations.lookupRecords.Input.Headers = .init(),
        body: Operations.lookupRecords.Input.Body
    ) async throws -> Operations.lookupRecords.Output {
        try await lookupRecords(Operations.lookupRecords.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Fetch Record Changes
    ///
    /// Get all record changes relative to a sync token
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/records/changes`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/changes/post(fetchRecordChanges)`.
    internal func fetchRecordChanges(
        path: Operations.fetchRecordChanges.Input.Path,
        headers: Operations.fetchRecordChanges.Input.Headers = .init(),
        body: Operations.fetchRecordChanges.Input.Body
    ) async throws -> Operations.fetchRecordChanges.Output {
        try await fetchRecordChanges(Operations.fetchRecordChanges.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List All Zones
    ///
    /// Fetch all zones in the database
    ///
    /// - Remark: HTTP `GET /database/{version}/{container}/{environment}/{database}/zones/list`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/list/get(listZones)`.
    internal func listZones(
        path: Operations.listZones.Input.Path,
        headers: Operations.listZones.Input.Headers = .init()
    ) async throws -> Operations.listZones.Output {
        try await listZones(Operations.listZones.Input(
            path: path,
            headers: headers
        ))
    }
    /// Lookup Zones
    ///
    /// Fetch specific zones by their IDs
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/zones/lookup`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/lookup/post(lookupZones)`.
    internal func lookupZones(
        path: Operations.lookupZones.Input.Path,
        headers: Operations.lookupZones.Input.Headers = .init(),
        body: Operations.lookupZones.Input.Body
    ) async throws -> Operations.lookupZones.Output {
        try await lookupZones(Operations.lookupZones.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Modify Zones
    ///
    /// Create or delete zones (only supported in private database)
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/zones/modify`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/modify/post(modifyZones)`.
    internal func modifyZones(
        path: Operations.modifyZones.Input.Path,
        headers: Operations.modifyZones.Input.Headers = .init(),
        body: Operations.modifyZones.Input.Body
    ) async throws -> Operations.modifyZones.Output {
        try await modifyZones(Operations.modifyZones.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Fetch Zone Changes
    ///
    /// Get all changed zones relative to a meta-sync token
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/zones/changes`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/changes/post(fetchZoneChanges)`.
    internal func fetchZoneChanges(
        path: Operations.fetchZoneChanges.Input.Path,
        headers: Operations.fetchZoneChanges.Input.Headers = .init(),
        body: Operations.fetchZoneChanges.Input.Body
    ) async throws -> Operations.fetchZoneChanges.Output {
        try await fetchZoneChanges(Operations.fetchZoneChanges.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List All Subscriptions
    ///
    /// Fetch all subscriptions in the database
    ///
    /// - Remark: HTTP `GET /database/{version}/{container}/{environment}/{database}/subscriptions/list`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/list/get(listSubscriptions)`.
    internal func listSubscriptions(
        path: Operations.listSubscriptions.Input.Path,
        headers: Operations.listSubscriptions.Input.Headers = .init()
    ) async throws -> Operations.listSubscriptions.Output {
        try await listSubscriptions(Operations.listSubscriptions.Input(
            path: path,
            headers: headers
        ))
    }
    /// Lookup Subscriptions
    ///
    /// Fetch specific subscriptions by their IDs
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/subscriptions/lookup`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/lookup/post(lookupSubscriptions)`.
    internal func lookupSubscriptions(
        path: Operations.lookupSubscriptions.Input.Path,
        headers: Operations.lookupSubscriptions.Input.Headers = .init(),
        body: Operations.lookupSubscriptions.Input.Body
    ) async throws -> Operations.lookupSubscriptions.Output {
        try await lookupSubscriptions(Operations.lookupSubscriptions.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Modify Subscriptions
    ///
    /// Create, update, or delete subscriptions
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/subscriptions/modify`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/modify/post(modifySubscriptions)`.
    internal func modifySubscriptions(
        path: Operations.modifySubscriptions.Input.Path,
        headers: Operations.modifySubscriptions.Input.Headers = .init(),
        body: Operations.modifySubscriptions.Input.Body
    ) async throws -> Operations.modifySubscriptions.Output {
        try await modifySubscriptions(Operations.modifySubscriptions.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get Current User
    ///
    /// Fetch the current authenticated user's information
    ///
    /// - Remark: HTTP `GET /database/{version}/{container}/{environment}/{database}/users/current`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/users/current/get(getCurrentUser)`.
    internal func getCurrentUser(
        path: Operations.getCurrentUser.Input.Path,
        headers: Operations.getCurrentUser.Input.Headers = .init()
    ) async throws -> Operations.getCurrentUser.Output {
        try await getCurrentUser(Operations.getCurrentUser.Input(
            path: path,
            headers: headers
        ))
    }
    /// Discover User Identities
    ///
    /// Discover all user identities based on email addresses or user record names
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/users/discover`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/users/discover/post(discoverUserIdentities)`.
    internal func discoverUserIdentities(
        path: Operations.discoverUserIdentities.Input.Path,
        headers: Operations.discoverUserIdentities.Input.Headers = .init(),
        body: Operations.discoverUserIdentities.Input.Body
    ) async throws -> Operations.discoverUserIdentities.Output {
        try await discoverUserIdentities(Operations.discoverUserIdentities.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Lookup Contacts (Deprecated)
    ///
    /// Fetch contacts (This endpoint is deprecated)
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/users/lookup/contacts`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/users/lookup/contacts/post(lookupContacts)`.
    @available(*, deprecated)
    internal func lookupContacts(
        path: Operations.lookupContacts.Input.Path,
        headers: Operations.lookupContacts.Input.Headers = .init(),
        body: Operations.lookupContacts.Input.Body
    ) async throws -> Operations.lookupContacts.Output {
        try await lookupContacts(Operations.lookupContacts.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Upload Assets
    ///
    /// Upload binary assets to CloudKit
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/assets/upload`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/assets/upload/post(uploadAssets)`.
    internal func uploadAssets(
        path: Operations.uploadAssets.Input.Path,
        headers: Operations.uploadAssets.Input.Headers = .init(),
        body: Operations.uploadAssets.Input.Body
    ) async throws -> Operations.uploadAssets.Output {
        try await uploadAssets(Operations.uploadAssets.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Create APNs Token
    ///
    /// Create an Apple Push Notification service (APNs) token
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/tokens/create`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/tokens/create/post(createToken)`.
    internal func createToken(
        path: Operations.createToken.Input.Path,
        headers: Operations.createToken.Input.Headers = .init(),
        body: Operations.createToken.Input.Body
    ) async throws -> Operations.createToken.Output {
        try await createToken(Operations.createToken.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Register Token
    ///
    /// Register a token for push notifications
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/tokens/register`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/tokens/register/post(registerToken)`.
    internal func registerToken(
        path: Operations.registerToken.Input.Path,
        headers: Operations.registerToken.Input.Headers = .init(),
        body: Operations.registerToken.Input.Body
    ) async throws -> Operations.registerToken.Output {
        try await registerToken(Operations.registerToken.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
internal enum Servers {
    /// CloudKit Web Services API
    internal enum Server1 {
        /// CloudKit Web Services API
        internal static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://api.apple-cloudkit.com",
                variables: []
            )
        }
    }
    /// CloudKit Web Services API
    @available(*, deprecated, renamed: "Servers.Server1.url")
    internal static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.apple-cloudkit.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
internal enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    internal enum Schemas {
        /// - Remark: Generated from `#/components/schemas/ZoneID`.
        internal struct ZoneID: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ZoneID/zoneName`.
            internal var zoneName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ZoneID/ownerName`.
            internal var ownerName: Swift.String?
            /// Creates a new `ZoneID`.
            ///
            /// - Parameters:
            ///   - zoneName:
            ///   - ownerName:
            internal init(
                zoneName: Swift.String? = nil,
                ownerName: Swift.String? = nil
            ) {
                self.zoneName = zoneName
                self.ownerName = ownerName
            }
            internal enum CodingKeys: String, CodingKey {
                case zoneName
                case ownerName
            }
        }
        /// - Remark: Generated from `#/components/schemas/Filter`.
        internal struct Filter: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Filter/comparator`.
            internal enum comparatorPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case EQUALS = "EQUALS"
                case NOT_EQUALS = "NOT_EQUALS"
                case LESS_THAN = "LESS_THAN"
                case LESS_THAN_OR_EQUALS = "LESS_THAN_OR_EQUALS"
                case GREATER_THAN = "GREATER_THAN"
                case GREATER_THAN_OR_EQUALS = "GREATER_THAN_OR_EQUALS"
                case NEAR = "NEAR"
                case CONTAINS_ALL_TOKENS = "CONTAINS_ALL_TOKENS"
                case IN = "IN"
                case NOT_IN = "NOT_IN"
                case CONTAINS_ANY_TOKENS = "CONTAINS_ANY_TOKENS"
                case LIST_CONTAINS = "LIST_CONTAINS"
                case NOT_LIST_CONTAINS = "NOT_LIST_CONTAINS"
                case BEGINS_WITH = "BEGINS_WITH"
                case NOT_BEGINS_WITH = "NOT_BEGINS_WITH"
                case LIST_MEMBER_BEGINS_WITH = "LIST_MEMBER_BEGINS_WITH"
                case NOT_LIST_MEMBER_BEGINS_WITH = "NOT_LIST_MEMBER_BEGINS_WITH"
            }
            /// - Remark: Generated from `#/components/schemas/Filter/comparator`.
            internal var comparator: Components.Schemas.Filter.comparatorPayload?
            /// - Remark: Generated from `#/components/schemas/Filter/fieldName`.
            internal var fieldName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Filter/fieldValue`.
            internal var fieldValue: Components.Schemas.FieldValue?
            /// Creates a new `Filter`.
            ///
            /// - Parameters:
            ///   - comparator:
            ///   - fieldName:
            ///   - fieldValue:
            internal init(
                comparator: Components.Schemas.Filter.comparatorPayload? = nil,
                fieldName: Swift.String? = nil,
                fieldValue: Components.Schemas.FieldValue? = nil
            ) {
                self.comparator = comparator
                self.fieldName = fieldName
                self.fieldValue = fieldValue
            }
            internal enum CodingKeys: String, CodingKey {
                case comparator
                case fieldName
                case fieldValue
            }
        }
        /// - Remark: Generated from `#/components/schemas/Sort`.
        internal struct Sort: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Sort/fieldName`.
            internal var fieldName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Sort/ascending`.
            internal var ascending: Swift.Bool?
            /// Creates a new `Sort`.
            ///
            /// - Parameters:
            ///   - fieldName:
            ///   - ascending:
            internal init(
                fieldName: Swift.String? = nil,
                ascending: Swift.Bool? = nil
            ) {
                self.fieldName = fieldName
                self.ascending = ascending
            }
            internal enum CodingKeys: String, CodingKey {
                case fieldName
                case ascending
            }
        }
        /// - Remark: Generated from `#/components/schemas/RecordOperation`.
        internal struct RecordOperation: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RecordOperation/operationType`.
            internal enum operationTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case create = "create"
                case update = "update"
                case forceUpdate = "forceUpdate"
                case replace = "replace"
                case forceReplace = "forceReplace"
                case delete = "delete"
                case forceDelete = "forceDelete"
            }
            /// - Remark: Generated from `#/components/schemas/RecordOperation/operationType`.
            internal var operationType: Components.Schemas.RecordOperation.operationTypePayload?
            /// - Remark: Generated from `#/components/schemas/RecordOperation/record`.
            internal var record: Components.Schemas.Record?
            /// Creates a new `RecordOperation`.
            ///
            /// - Parameters:
            ///   - operationType:
            ///   - record:
            internal init(
                operationType: Components.Schemas.RecordOperation.operationTypePayload? = nil,
                record: Components.Schemas.Record? = nil
            ) {
                self.operationType = operationType
                self.record = record
            }
            internal enum CodingKeys: String, CodingKey {
                case operationType
                case record
            }
        }
        /// - Remark: Generated from `#/components/schemas/Record`.
        internal struct Record: Codable, Hashable, Sendable {
            /// The unique identifier for the record
            ///
            /// - Remark: Generated from `#/components/schemas/Record/recordName`.
            internal var recordName: Swift.String?
            /// The record type (schema name)
            ///
            /// - Remark: Generated from `#/components/schemas/Record/recordType`.
            internal var recordType: Swift.String?
            /// Change tag for optimistic concurrency control
            ///
            /// - Remark: Generated from `#/components/schemas/Record/recordChangeTag`.
            internal var recordChangeTag: Swift.String?
            /// Record fields with their values and types
            ///
            /// - Remark: Generated from `#/components/schemas/Record/fields`.
            internal struct fieldsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Components.Schemas.FieldValue]
                /// Creates a new `fieldsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Components.Schemas.FieldValue] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Record fields with their values and types
            ///
            /// - Remark: Generated from `#/components/schemas/Record/fields`.
            internal var fields: Components.Schemas.Record.fieldsPayload?
            /// Creates a new `Record`.
            ///
            /// - Parameters:
            ///   - recordName: The unique identifier for the record
            ///   - recordType: The record type (schema name)
            ///   - recordChangeTag: Change tag for optimistic concurrency control
            ///   - fields: Record fields with their values and types
            internal init(
                recordName: Swift.String? = nil,
                recordType: Swift.String? = nil,
                recordChangeTag: Swift.String? = nil,
                fields: Components.Schemas.Record.fieldsPayload? = nil
            ) {
                self.recordName = recordName
                self.recordType = recordType
                self.recordChangeTag = recordChangeTag
                self.fields = fields
            }
            internal enum CodingKeys: String, CodingKey {
                case recordName
                case recordType
                case recordChangeTag
                case fields
            }
        }
        /// A CloudKit field value with its type information
        ///
        /// - Remark: Generated from `#/components/schemas/FieldValue`.
        internal typealias FieldValue = CustomFieldValue
        /// A text string value
        ///
        /// - Remark: Generated from `#/components/schemas/StringValue`.
        internal typealias StringValue = Swift.String
        /// A 64-bit integer value
        ///
        /// - Remark: Generated from `#/components/schemas/Int64Value`.
        internal typealias Int64Value = Swift.Int64
        /// A double-precision floating point value
        ///
        /// - Remark: Generated from `#/components/schemas/DoubleValue`.
        internal typealias DoubleValue = Swift.Double
        /// A true or false value
        ///
        /// - Remark: Generated from `#/components/schemas/BooleanValue`.
        internal typealias BooleanValue = Swift.Bool
        /// Base64-encoded string representing binary data
        ///
        /// - Remark: Generated from `#/components/schemas/BytesValue`.
        internal typealias BytesValue = Swift.String
        /// Number representing milliseconds since epoch (January 1, 1970)
        ///
        /// - Remark: Generated from `#/components/schemas/DateValue`.
        internal typealias DateValue = Swift.Double
        /// Location dictionary as defined in CloudKit Web Services
        ///
        /// - Remark: Generated from `#/components/schemas/LocationValue`.
        internal struct LocationValue: Codable, Hashable, Sendable {
            /// Latitude in degrees
            ///
            /// - Remark: Generated from `#/components/schemas/LocationValue/latitude`.
            internal var latitude: Swift.Double?
            /// Longitude in degrees
            ///
            /// - Remark: Generated from `#/components/schemas/LocationValue/longitude`.
            internal var longitude: Swift.Double?
            /// Horizontal accuracy in meters
            ///
            /// - Remark: Generated from `#/components/schemas/LocationValue/horizontalAccuracy`.
            internal var horizontalAccuracy: Swift.Double?
            /// Vertical accuracy in meters
            ///
            /// - Remark: Generated from `#/components/schemas/LocationValue/verticalAccuracy`.
            internal var verticalAccuracy: Swift.Double?
            /// Altitude in meters
            ///
            /// - Remark: Generated from `#/components/schemas/LocationValue/altitude`.
            internal var altitude: Swift.Double?
            /// Speed in meters per second
            ///
            /// - Remark: Generated from `#/components/schemas/LocationValue/speed`.
            internal var speed: Swift.Double?
            /// Course in degrees
            ///
            /// - Remark: Generated from `#/components/schemas/LocationValue/course`.
            internal var course: Swift.Double?
            /// Timestamp in milliseconds since epoch
            ///
            /// - Remark: Generated from `#/components/schemas/LocationValue/timestamp`.
            internal var timestamp: Swift.Double?
            /// Creates a new `LocationValue`.
            ///
            /// - Parameters:
            ///   - latitude: Latitude in degrees
            ///   - longitude: Longitude in degrees
            ///   - horizontalAccuracy: Horizontal accuracy in meters
            ///   - verticalAccuracy: Vertical accuracy in meters
            ///   - altitude: Altitude in meters
            ///   - speed: Speed in meters per second
            ///   - course: Course in degrees
            ///   - timestamp: Timestamp in milliseconds since epoch
            internal init(
                latitude: Swift.Double? = nil,
                longitude: Swift.Double? = nil,
                horizontalAccuracy: Swift.Double? = nil,
                verticalAccuracy: Swift.Double? = nil,
                altitude: Swift.Double? = nil,
                speed: Swift.Double? = nil,
                course: Swift.Double? = nil,
                timestamp: Swift.Double? = nil
            ) {
                self.latitude = latitude
                self.longitude = longitude
                self.horizontalAccuracy = horizontalAccuracy
                self.verticalAccuracy = verticalAccuracy
                self.altitude = altitude
                self.speed = speed
                self.course = course
                self.timestamp = timestamp
            }
            internal enum CodingKeys: String, CodingKey {
                case latitude
                case longitude
                case horizontalAccuracy
                case verticalAccuracy
                case altitude
                case speed
                case course
                case timestamp
            }
        }
        /// Reference dictionary as defined in CloudKit Web Services
        ///
        /// - Remark: Generated from `#/components/schemas/ReferenceValue`.
        internal struct ReferenceValue: Codable, Hashable, Sendable {
            /// The record name being referenced
            ///
            /// - Remark: Generated from `#/components/schemas/ReferenceValue/recordName`.
            internal var recordName: Swift.String?
            /// Action to perform on the referenced record
            ///
            /// - Remark: Generated from `#/components/schemas/ReferenceValue/action`.
            internal enum actionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case DELETE_SELF = "DELETE_SELF"
            }
            /// Action to perform on the referenced record
            ///
            /// - Remark: Generated from `#/components/schemas/ReferenceValue/action`.
            internal var action: Components.Schemas.ReferenceValue.actionPayload?
            /// Creates a new `ReferenceValue`.
            ///
            /// - Parameters:
            ///   - recordName: The record name being referenced
            ///   - action: Action to perform on the referenced record
            internal init(
                recordName: Swift.String? = nil,
                action: Components.Schemas.ReferenceValue.actionPayload? = nil
            ) {
                self.recordName = recordName
                self.action = action
            }
            internal enum CodingKeys: String, CodingKey {
                case recordName
                case action
            }
        }
        /// Asset dictionary as defined in CloudKit Web Services
        ///
        /// - Remark: Generated from `#/components/schemas/AssetValue`.
        internal struct AssetValue: Codable, Hashable, Sendable {
            /// Checksum of the asset file
            ///
            /// - Remark: Generated from `#/components/schemas/AssetValue/fileChecksum`.
            internal var fileChecksum: Swift.String?
            /// Size of the asset in bytes
            ///
            /// - Remark: Generated from `#/components/schemas/AssetValue/size`.
            internal var size: Swift.Int64?
            /// Checksum of the asset reference
            ///
            /// - Remark: Generated from `#/components/schemas/AssetValue/referenceChecksum`.
            internal var referenceChecksum: Swift.String?
            /// Wrapping key for the asset
            ///
            /// - Remark: Generated from `#/components/schemas/AssetValue/wrappingKey`.
            internal var wrappingKey: Swift.String?
            /// Receipt for the asset
            ///
            /// - Remark: Generated from `#/components/schemas/AssetValue/receipt`.
            internal var receipt: Swift.String?
            /// URL for downloading the asset
            ///
            /// - Remark: Generated from `#/components/schemas/AssetValue/downloadURL`.
            internal var downloadURL: Swift.String?
            /// Creates a new `AssetValue`.
            ///
            /// - Parameters:
            ///   - fileChecksum: Checksum of the asset file
            ///   - size: Size of the asset in bytes
            ///   - referenceChecksum: Checksum of the asset reference
            ///   - wrappingKey: Wrapping key for the asset
            ///   - receipt: Receipt for the asset
            ///   - downloadURL: URL for downloading the asset
            internal init(
                fileChecksum: Swift.String? = nil,
                size: Swift.Int64? = nil,
                referenceChecksum: Swift.String? = nil,
                wrappingKey: Swift.String? = nil,
                receipt: Swift.String? = nil,
                downloadURL: Swift.String? = nil
            ) {
                self.fileChecksum = fileChecksum
                self.size = size
                self.referenceChecksum = referenceChecksum
                self.wrappingKey = wrappingKey
                self.receipt = receipt
                self.downloadURL = downloadURL
            }
            internal enum CodingKeys: String, CodingKey {
                case fileChecksum
                case size
                case referenceChecksum
                case wrappingKey
                case receipt
                case downloadURL
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListValue`.
        internal indirect enum ListValuePayload: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ListValue/case1`.
            case StringValue(Components.Schemas.StringValue)
            /// - Remark: Generated from `#/components/schemas/ListValue/case2`.
            case Int64Value(Components.Schemas.Int64Value)
            /// - Remark: Generated from `#/components/schemas/ListValue/case3`.
            case DoubleValue(Components.Schemas.DoubleValue)
            /// - Remark: Generated from `#/components/schemas/ListValue/case4`.
            case BooleanValue(Components.Schemas.BooleanValue)
            /// - Remark: Generated from `#/components/schemas/ListValue/case5`.
            case BytesValue(Components.Schemas.BytesValue)
            /// - Remark: Generated from `#/components/schemas/ListValue/case6`.
            case DateValue(Components.Schemas.DateValue)
            /// - Remark: Generated from `#/components/schemas/ListValue/case7`.
            case LocationValue(Components.Schemas.LocationValue)
            /// - Remark: Generated from `#/components/schemas/ListValue/case8`.
            case ReferenceValue(Components.Schemas.ReferenceValue)
            /// - Remark: Generated from `#/components/schemas/ListValue/case9`.
            case AssetValue(Components.Schemas.AssetValue)
            /// - Remark: Generated from `#/components/schemas/ListValue/case10`.
            case ListValue(Components.Schemas.ListValue)
            internal init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .StringValue(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .Int64Value(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .DoubleValue(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .BooleanValue(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .BytesValue(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .DateValue(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .LocationValue(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ReferenceValue(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .AssetValue(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ListValue(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            internal func encode(to encoder: any Encoder) throws {
                switch self {
                case let .StringValue(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .Int64Value(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .DoubleValue(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .BooleanValue(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .BytesValue(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .DateValue(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .LocationValue(value):
                    try value.encode(to: encoder)
                case let .ReferenceValue(value):
                    try value.encode(to: encoder)
                case let .AssetValue(value):
                    try value.encode(to: encoder)
                case let .ListValue(value):
                    try encoder.encodeToSingleValueContainer(value)
                }
            }
        }
        /// Array containing any of the above field types
        ///
        /// - Remark: Generated from `#/components/schemas/ListValue`.
        internal typealias ListValue = [Components.Schemas.ListValuePayload]
        /// - Remark: Generated from `#/components/schemas/ZoneOperation`.
        internal struct ZoneOperation: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ZoneOperation/operationType`.
            internal enum operationTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case create = "create"
                case delete = "delete"
            }
            /// - Remark: Generated from `#/components/schemas/ZoneOperation/operationType`.
            internal var operationType: Components.Schemas.ZoneOperation.operationTypePayload?
            /// - Remark: Generated from `#/components/schemas/ZoneOperation/zone`.
            internal struct zonePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ZoneOperation/zone/zoneID`.
                internal var zoneID: Components.Schemas.ZoneID?
                /// Creates a new `zonePayload`.
                ///
                /// - Parameters:
                ///   - zoneID:
                internal init(zoneID: Components.Schemas.ZoneID? = nil) {
                    self.zoneID = zoneID
                }
                internal enum CodingKeys: String, CodingKey {
                    case zoneID
                }
            }
            /// - Remark: Generated from `#/components/schemas/ZoneOperation/zone`.
            internal var zone: Components.Schemas.ZoneOperation.zonePayload?
            /// Creates a new `ZoneOperation`.
            ///
            /// - Parameters:
            ///   - operationType:
            ///   - zone:
            internal init(
                operationType: Components.Schemas.ZoneOperation.operationTypePayload? = nil,
                zone: Components.Schemas.ZoneOperation.zonePayload? = nil
            ) {
                self.operationType = operationType
                self.zone = zone
            }
            internal enum CodingKeys: String, CodingKey {
                case operationType
                case zone
            }
        }
        /// - Remark: Generated from `#/components/schemas/SubscriptionOperation`.
        internal struct SubscriptionOperation: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SubscriptionOperation/operationType`.
            internal enum operationTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case create = "create"
                case update = "update"
                case delete = "delete"
            }
            /// - Remark: Generated from `#/components/schemas/SubscriptionOperation/operationType`.
            internal var operationType: Components.Schemas.SubscriptionOperation.operationTypePayload?
            /// - Remark: Generated from `#/components/schemas/SubscriptionOperation/subscription`.
            internal var subscription: Components.Schemas.Subscription?
            /// Creates a new `SubscriptionOperation`.
            ///
            /// - Parameters:
            ///   - operationType:
            ///   - subscription:
            internal init(
                operationType: Components.Schemas.SubscriptionOperation.operationTypePayload? = nil,
                subscription: Components.Schemas.Subscription? = nil
            ) {
                self.operationType = operationType
                self.subscription = subscription
            }
            internal enum CodingKeys: String, CodingKey {
                case operationType
                case subscription
            }
        }
        /// - Remark: Generated from `#/components/schemas/Subscription`.
        internal struct Subscription: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Subscription/subscriptionID`.
            internal var subscriptionID: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Subscription/subscriptionType`.
            internal enum subscriptionTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case query = "query"
                case zone = "zone"
            }
            /// - Remark: Generated from `#/components/schemas/Subscription/subscriptionType`.
            internal var subscriptionType: Components.Schemas.Subscription.subscriptionTypePayload?
            /// - Remark: Generated from `#/components/schemas/Subscription/query`.
            internal var query: OpenAPIRuntime.OpenAPIObjectContainer?
            /// - Remark: Generated from `#/components/schemas/Subscription/zoneID`.
            internal var zoneID: Components.Schemas.ZoneID?
            /// - Remark: Generated from `#/components/schemas/Subscription/firesOnPayload`.
            internal enum firesOnPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case create = "create"
                case update = "update"
                case delete = "delete"
            }
            /// - Remark: Generated from `#/components/schemas/Subscription/firesOn`.
            internal typealias firesOnPayload = [Components.Schemas.Subscription.firesOnPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/Subscription/firesOn`.
            internal var firesOn: Components.Schemas.Subscription.firesOnPayload?
            /// Creates a new `Subscription`.
            ///
            /// - Parameters:
            ///   - subscriptionID:
            ///   - subscriptionType:
            ///   - query:
            ///   - zoneID:
            ///   - firesOn:
            internal init(
                subscriptionID: Swift.String? = nil,
                subscriptionType: Components.Schemas.Subscription.subscriptionTypePayload? = nil,
                query: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                zoneID: Components.Schemas.ZoneID? = nil,
                firesOn: Components.Schemas.Subscription.firesOnPayload? = nil
            ) {
                self.subscriptionID = subscriptionID
                self.subscriptionType = subscriptionType
                self.query = query
                self.zoneID = zoneID
                self.firesOn = firesOn
            }
            internal enum CodingKeys: String, CodingKey {
                case subscriptionID
                case subscriptionType
                case query
                case zoneID
                case firesOn
            }
        }
        /// - Remark: Generated from `#/components/schemas/QueryResponse`.
        internal struct QueryResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/QueryResponse/records`.
            internal var records: [Components.Schemas.Record]?
            /// - Remark: Generated from `#/components/schemas/QueryResponse/continuationMarker`.
            internal var continuationMarker: Swift.String?
            /// Creates a new `QueryResponse`.
            ///
            /// - Parameters:
            ///   - records:
            ///   - continuationMarker:
            internal init(
                records: [Components.Schemas.Record]? = nil,
                continuationMarker: Swift.String? = nil
            ) {
                self.records = records
                self.continuationMarker = continuationMarker
            }
            internal enum CodingKeys: String, CodingKey {
                case records
                case continuationMarker
            }
        }
        /// - Remark: Generated from `#/components/schemas/ModifyResponse`.
        internal struct ModifyResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ModifyResponse/records`.
            internal var records: [Components.Schemas.Record]?
            /// Creates a new `ModifyResponse`.
            ///
            /// - Parameters:
            ///   - records:
            internal init(records: [Components.Schemas.Record]? = nil) {
                self.records = records
            }
            internal enum CodingKeys: String, CodingKey {
                case records
            }
        }
        /// - Remark: Generated from `#/components/schemas/LookupResponse`.
        internal struct LookupResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LookupResponse/records`.
            internal var records: [Components.Schemas.Record]?
            /// Creates a new `LookupResponse`.
            ///
            /// - Parameters:
            ///   - records:
            internal init(records: [Components.Schemas.Record]? = nil) {
                self.records = records
            }
            internal enum CodingKeys: String, CodingKey {
                case records
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChangesResponse`.
        internal struct ChangesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChangesResponse/records`.
            internal var records: [Components.Schemas.Record]?
            /// - Remark: Generated from `#/components/schemas/ChangesResponse/syncToken`.
            internal var syncToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChangesResponse/moreComing`.
            internal var moreComing: Swift.Bool?
            /// Creates a new `ChangesResponse`.
            ///
            /// - Parameters:
            ///   - records:
            ///   - syncToken:
            ///   - moreComing:
            internal init(
                records: [Components.Schemas.Record]? = nil,
                syncToken: Swift.String? = nil,
                moreComing: Swift.Bool? = nil
            ) {
                self.records = records
                self.syncToken = syncToken
                self.moreComing = moreComing
            }
            internal enum CodingKeys: String, CodingKey {
                case records
                case syncToken
                case moreComing
            }
        }
        /// - Remark: Generated from `#/components/schemas/ZonesListResponse`.
        internal struct ZonesListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ZonesListResponse/zonesPayload`.
            internal struct zonesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ZonesListResponse/zonesPayload/zoneID`.
                internal var zoneID: Components.Schemas.ZoneID?
                /// Creates a new `zonesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - zoneID:
                internal init(zoneID: Components.Schemas.ZoneID? = nil) {
                    self.zoneID = zoneID
                }
                internal enum CodingKeys: String, CodingKey {
                    case zoneID
                }
            }
            /// - Remark: Generated from `#/components/schemas/ZonesListResponse/zones`.
            internal typealias zonesPayload = [Components.Schemas.ZonesListResponse.zonesPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/ZonesListResponse/zones`.
            internal var zones: Components.Schemas.ZonesListResponse.zonesPayload?
            /// Creates a new `ZonesListResponse`.
            ///
            /// - Parameters:
            ///   - zones:
            internal init(zones: Components.Schemas.ZonesListResponse.zonesPayload? = nil) {
                self.zones = zones
            }
            internal enum CodingKeys: String, CodingKey {
                case zones
            }
        }
        /// - Remark: Generated from `#/components/schemas/ZonesLookupResponse`.
        internal struct ZonesLookupResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ZonesLookupResponse/zonesPayload`.
            internal struct zonesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ZonesLookupResponse/zonesPayload/zoneID`.
                internal var zoneID: Components.Schemas.ZoneID?
                /// Creates a new `zonesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - zoneID:
                internal init(zoneID: Components.Schemas.ZoneID? = nil) {
                    self.zoneID = zoneID
                }
                internal enum CodingKeys: String, CodingKey {
                    case zoneID
                }
            }
            /// - Remark: Generated from `#/components/schemas/ZonesLookupResponse/zones`.
            internal typealias zonesPayload = [Components.Schemas.ZonesLookupResponse.zonesPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/ZonesLookupResponse/zones`.
            internal var zones: Components.Schemas.ZonesLookupResponse.zonesPayload?
            /// Creates a new `ZonesLookupResponse`.
            ///
            /// - Parameters:
            ///   - zones:
            internal init(zones: Components.Schemas.ZonesLookupResponse.zonesPayload? = nil) {
                self.zones = zones
            }
            internal enum CodingKeys: String, CodingKey {
                case zones
            }
        }
        /// - Remark: Generated from `#/components/schemas/ZonesModifyResponse`.
        internal struct ZonesModifyResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ZonesModifyResponse/zonesPayload`.
            internal struct zonesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ZonesModifyResponse/zonesPayload/zoneID`.
                internal var zoneID: Components.Schemas.ZoneID?
                /// Creates a new `zonesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - zoneID:
                internal init(zoneID: Components.Schemas.ZoneID? = nil) {
                    self.zoneID = zoneID
                }
                internal enum CodingKeys: String, CodingKey {
                    case zoneID
                }
            }
            /// - Remark: Generated from `#/components/schemas/ZonesModifyResponse/zones`.
            internal typealias zonesPayload = [Components.Schemas.ZonesModifyResponse.zonesPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/ZonesModifyResponse/zones`.
            internal var zones: Components.Schemas.ZonesModifyResponse.zonesPayload?
            /// Creates a new `ZonesModifyResponse`.
            ///
            /// - Parameters:
            ///   - zones:
            internal init(zones: Components.Schemas.ZonesModifyResponse.zonesPayload? = nil) {
                self.zones = zones
            }
            internal enum CodingKeys: String, CodingKey {
                case zones
            }
        }
        /// - Remark: Generated from `#/components/schemas/ZoneChangesResponse`.
        internal struct ZoneChangesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ZoneChangesResponse/zonesPayload`.
            internal struct zonesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ZoneChangesResponse/zonesPayload/zoneID`.
                internal var zoneID: Components.Schemas.ZoneID?
                /// Creates a new `zonesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - zoneID:
                internal init(zoneID: Components.Schemas.ZoneID? = nil) {
                    self.zoneID = zoneID
                }
                internal enum CodingKeys: String, CodingKey {
                    case zoneID
                }
            }
            /// - Remark: Generated from `#/components/schemas/ZoneChangesResponse/zones`.
            internal typealias zonesPayload = [Components.Schemas.ZoneChangesResponse.zonesPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/ZoneChangesResponse/zones`.
            internal var zones: Components.Schemas.ZoneChangesResponse.zonesPayload?
            /// - Remark: Generated from `#/components/schemas/ZoneChangesResponse/syncToken`.
            internal var syncToken: Swift.String?
            /// Creates a new `ZoneChangesResponse`.
            ///
            /// - Parameters:
            ///   - zones:
            ///   - syncToken:
            internal init(
                zones: Components.Schemas.ZoneChangesResponse.zonesPayload? = nil,
                syncToken: Swift.String? = nil
            ) {
                self.zones = zones
                self.syncToken = syncToken
            }
            internal enum CodingKeys: String, CodingKey {
                case zones
                case syncToken
            }
        }
        /// - Remark: Generated from `#/components/schemas/SubscriptionsListResponse`.
        internal struct SubscriptionsListResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SubscriptionsListResponse/subscriptions`.
            internal var subscriptions: [Components.Schemas.Subscription]?
            /// Creates a new `SubscriptionsListResponse`.
            ///
            /// - Parameters:
            ///   - subscriptions:
            internal init(subscriptions: [Components.Schemas.Subscription]? = nil) {
                self.subscriptions = subscriptions
            }
            internal enum CodingKeys: String, CodingKey {
                case subscriptions
            }
        }
        /// - Remark: Generated from `#/components/schemas/SubscriptionsLookupResponse`.
        internal struct SubscriptionsLookupResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SubscriptionsLookupResponse/subscriptions`.
            internal var subscriptions: [Components.Schemas.Subscription]?
            /// Creates a new `SubscriptionsLookupResponse`.
            ///
            /// - Parameters:
            ///   - subscriptions:
            internal init(subscriptions: [Components.Schemas.Subscription]? = nil) {
                self.subscriptions = subscriptions
            }
            internal enum CodingKeys: String, CodingKey {
                case subscriptions
            }
        }
        /// - Remark: Generated from `#/components/schemas/SubscriptionsModifyResponse`.
        internal struct SubscriptionsModifyResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SubscriptionsModifyResponse/subscriptions`.
            internal var subscriptions: [Components.Schemas.Subscription]?
            /// Creates a new `SubscriptionsModifyResponse`.
            ///
            /// - Parameters:
            ///   - subscriptions:
            internal init(subscriptions: [Components.Schemas.Subscription]? = nil) {
                self.subscriptions = subscriptions
            }
            internal enum CodingKeys: String, CodingKey {
                case subscriptions
            }
        }
        /// - Remark: Generated from `#/components/schemas/UserResponse`.
        internal struct UserResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UserResponse/userRecordName`.
            internal var userRecordName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UserResponse/firstName`.
            internal var firstName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UserResponse/lastName`.
            internal var lastName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UserResponse/emailAddress`.
            internal var emailAddress: Swift.String?
            /// Creates a new `UserResponse`.
            ///
            /// - Parameters:
            ///   - userRecordName:
            ///   - firstName:
            ///   - lastName:
            ///   - emailAddress:
            internal init(
                userRecordName: Swift.String? = nil,
                firstName: Swift.String? = nil,
                lastName: Swift.String? = nil,
                emailAddress: Swift.String? = nil
            ) {
                self.userRecordName = userRecordName
                self.firstName = firstName
                self.lastName = lastName
                self.emailAddress = emailAddress
            }
            internal enum CodingKeys: String, CodingKey {
                case userRecordName
                case firstName
                case lastName
                case emailAddress
            }
        }
        /// - Remark: Generated from `#/components/schemas/DiscoverResponse`.
        internal struct DiscoverResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DiscoverResponse/usersPayload`.
            internal struct usersPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/DiscoverResponse/usersPayload/userRecordName`.
                internal var userRecordName: Swift.String?
                /// - Remark: Generated from `#/components/schemas/DiscoverResponse/usersPayload/firstName`.
                internal var firstName: Swift.String?
                /// - Remark: Generated from `#/components/schemas/DiscoverResponse/usersPayload/lastName`.
                internal var lastName: Swift.String?
                /// - Remark: Generated from `#/components/schemas/DiscoverResponse/usersPayload/emailAddress`.
                internal var emailAddress: Swift.String?
                /// Creates a new `usersPayloadPayload`.
                ///
                /// - Parameters:
                ///   - userRecordName:
                ///   - firstName:
                ///   - lastName:
                ///   - emailAddress:
                internal init(
                    userRecordName: Swift.String? = nil,
                    firstName: Swift.String? = nil,
                    lastName: Swift.String? = nil,
                    emailAddress: Swift.String? = nil
                ) {
                    self.userRecordName = userRecordName
                    self.firstName = firstName
                    self.lastName = lastName
                    self.emailAddress = emailAddress
                }
                internal enum CodingKeys: String, CodingKey {
                    case userRecordName
                    case firstName
                    case lastName
                    case emailAddress
                }
            }
            /// - Remark: Generated from `#/components/schemas/DiscoverResponse/users`.
            internal typealias usersPayload = [Components.Schemas.DiscoverResponse.usersPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/DiscoverResponse/users`.
            internal var users: Components.Schemas.DiscoverResponse.usersPayload?
            /// Creates a new `DiscoverResponse`.
            ///
            /// - Parameters:
            ///   - users:
            internal init(users: Components.Schemas.DiscoverResponse.usersPayload? = nil) {
                self.users = users
            }
            internal enum CodingKeys: String, CodingKey {
                case users
            }
        }
        /// - Remark: Generated from `#/components/schemas/ContactsResponse`.
        internal struct ContactsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ContactsResponse/contacts`.
            internal var contacts: [OpenAPIRuntime.OpenAPIObjectContainer]?
            /// Creates a new `ContactsResponse`.
            ///
            /// - Parameters:
            ///   - contacts:
            internal init(contacts: [OpenAPIRuntime.OpenAPIObjectContainer]? = nil) {
                self.contacts = contacts
            }
            internal enum CodingKeys: String, CodingKey {
                case contacts
            }
        }
        /// - Remark: Generated from `#/components/schemas/AssetUploadResponse`.
        internal struct AssetUploadResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AssetUploadResponse/tokensPayload`.
            internal struct tokensPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AssetUploadResponse/tokensPayload/url`.
                internal var url: Swift.String?
                /// - Remark: Generated from `#/components/schemas/AssetUploadResponse/tokensPayload/recordName`.
                internal var recordName: Swift.String?
                /// - Remark: Generated from `#/components/schemas/AssetUploadResponse/tokensPayload/fieldName`.
                internal var fieldName: Swift.String?
                /// Creates a new `tokensPayloadPayload`.
                ///
                /// - Parameters:
                ///   - url:
                ///   - recordName:
                ///   - fieldName:
                internal init(
                    url: Swift.String? = nil,
                    recordName: Swift.String? = nil,
                    fieldName: Swift.String? = nil
                ) {
                    self.url = url
                    self.recordName = recordName
                    self.fieldName = fieldName
                }
                internal enum CodingKeys: String, CodingKey {
                    case url
                    case recordName
                    case fieldName
                }
            }
            /// - Remark: Generated from `#/components/schemas/AssetUploadResponse/tokens`.
            internal typealias tokensPayload = [Components.Schemas.AssetUploadResponse.tokensPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/AssetUploadResponse/tokens`.
            internal var tokens: Components.Schemas.AssetUploadResponse.tokensPayload?
            /// Creates a new `AssetUploadResponse`.
            ///
            /// - Parameters:
            ///   - tokens:
            internal init(tokens: Components.Schemas.AssetUploadResponse.tokensPayload? = nil) {
                self.tokens = tokens
            }
            internal enum CodingKeys: String, CodingKey {
                case tokens
            }
        }
        /// - Remark: Generated from `#/components/schemas/TokenResponse`.
        internal struct TokenResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TokenResponse/apnsToken`.
            internal var apnsToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TokenResponse/webcAuthToken`.
            internal var webcAuthToken: Swift.String?
            /// Creates a new `TokenResponse`.
            ///
            /// - Parameters:
            ///   - apnsToken:
            ///   - webcAuthToken:
            internal init(
                apnsToken: Swift.String? = nil,
                webcAuthToken: Swift.String? = nil
            ) {
                self.apnsToken = apnsToken
                self.webcAuthToken = webcAuthToken
            }
            internal enum CodingKeys: String, CodingKey {
                case apnsToken
                case webcAuthToken
            }
        }
        /// Error response object. For a full list of error codes and meanings, see:
        /// https://developer.apple.com/library/archive/documentation/DataManagement/Conceptual/CloudKitWebServicesReference/ErrorCodes.html#//apple_ref/doc/uid/TP40015240-CH4-SW1
        ///
        /// Common error codes include:
        /// - AUTHENTICATION_FAILED: The request could not be authenticated.
        /// - ACCESS_DENIED: The user does not have permission to access the resource.
        /// - INVALID_ARGUMENTS: The request contained invalid parameters.
        /// - LIMIT_EXCEEDED: A request or resource limit was exceeded.
        /// - NOT_FOUND: The requested resource does not exist.
        /// - SERVICE_UNAVAILABLE: The service is temporarily unavailable.
        /// - ZONE_NOT_FOUND: The specified zone does not exist.
        /// - RECORD_NOT_FOUND: The specified record does not exist.
        /// - PARTIAL_FAILURE: Some, but not all, operations succeeded.
        ///
        /// See the documentation for a complete list and details.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ErrorResponse`.
        internal struct ErrorResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/uuid`.
            internal var uuid: Swift.String?
            /// Server error code. See https://developer.apple.com/library/archive/documentation/DataManagement/Conceptual/CloudKitWebServicesReference/ErrorCodes.html#//apple_ref/doc/uid/TP40015240-CH4-SW1 for complete details.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/serverErrorCode`.
            internal enum serverErrorCodePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case ACCESS_DENIED = "ACCESS_DENIED"
                case ATOMIC_ERROR = "ATOMIC_ERROR"
                case AUTHENTICATION_FAILED = "AUTHENTICATION_FAILED"
                case AUTHENTICATION_REQUIRED = "AUTHENTICATION_REQUIRED"
                case BAD_REQUEST = "BAD_REQUEST"
                case CONFLICT = "CONFLICT"
                case EXISTS = "EXISTS"
                case INTERNAL_ERROR = "INTERNAL_ERROR"
                case NOT_FOUND = "NOT_FOUND"
                case QUOTA_EXCEEDED = "QUOTA_EXCEEDED"
                case THROTTLED = "THROTTLED"
                case TRY_AGAIN_LATER = "TRY_AGAIN_LATER"
                case VALIDATING_REFERENCE_ERROR = "VALIDATING_REFERENCE_ERROR"
                case ZONE_NOT_FOUND = "ZONE_NOT_FOUND"
            }
            /// Server error code. See https://developer.apple.com/library/archive/documentation/DataManagement/Conceptual/CloudKitWebServicesReference/ErrorCodes.html#//apple_ref/doc/uid/TP40015240-CH4-SW1 for complete details.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/serverErrorCode`.
            internal var serverErrorCode: Components.Schemas.ErrorResponse.serverErrorCodePayload?
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/reason`.
            internal var reason: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ErrorResponse/redirectURL`.
            internal var redirectURL: Swift.String?
            /// Creates a new `ErrorResponse`.
            ///
            /// - Parameters:
            ///   - uuid:
            ///   - serverErrorCode: Server error code. See https://developer.apple.com/library/archive/documentation/DataManagement/Conceptual/CloudKitWebServicesReference/ErrorCodes.html#//apple_ref/doc/uid/TP40015240-CH4-SW1 for complete details.
            ///   - reason:
            ///   - redirectURL:
            internal init(
                uuid: Swift.String? = nil,
                serverErrorCode: Components.Schemas.ErrorResponse.serverErrorCodePayload? = nil,
                reason: Swift.String? = nil,
                redirectURL: Swift.String? = nil
            ) {
                self.uuid = uuid
                self.serverErrorCode = serverErrorCode
                self.reason = reason
                self.redirectURL = redirectURL
            }
            internal enum CodingKeys: String, CodingKey {
                case uuid
                case serverErrorCode
                case reason
                case redirectURL
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    internal enum Parameters {
        /// Protocol version
        ///
        /// - Remark: Generated from `#/components/parameters/version`.
        internal typealias version = Swift.String
        /// Container ID (begins with "iCloud.")
        ///
        /// - Remark: Generated from `#/components/parameters/container`.
        internal typealias container = Swift.String
        /// Container environment
        ///
        /// - Remark: Generated from `#/components/parameters/environment`.
        internal enum environment: String, Codable, Hashable, Sendable, CaseIterable {
            case development = "development"
            case production = "production"
        }
        /// Database scope
        ///
        /// - Remark: Generated from `#/components/parameters/database`.
        internal enum database: String, Codable, Hashable, Sendable, CaseIterable {
            case _public = "public"
            case _private = "private"
            case shared = "shared"
        }
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    internal enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    internal enum Responses {
        internal struct BadRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/BadRequest/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/BadRequest/content/application\/json`.
                case json(Components.Schemas.ErrorResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ErrorResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.BadRequest.Body
            /// Creates a new `BadRequest`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.BadRequest.Body) {
                self.body = body
            }
        }
        internal struct Unauthorized: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/Unauthorized/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/Unauthorized/content/application\/json`.
                case json(Components.Schemas.ErrorResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ErrorResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.Unauthorized.Body
            /// Creates a new `Unauthorized`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.Unauthorized.Body) {
                self.body = body
            }
        }
        internal struct Forbidden: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/Forbidden/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/Forbidden/content/application\/json`.
                case json(Components.Schemas.ErrorResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ErrorResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.Forbidden.Body
            /// Creates a new `Forbidden`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.Forbidden.Body) {
                self.body = body
            }
        }
        internal struct NotFound: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/NotFound/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/NotFound/content/application\/json`.
                case json(Components.Schemas.ErrorResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ErrorResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.NotFound.Body
            /// Creates a new `NotFound`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.NotFound.Body) {
                self.body = body
            }
        }
        internal struct Conflict: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/Conflict/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/Conflict/content/application\/json`.
                case json(Components.Schemas.ErrorResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ErrorResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.Conflict.Body
            /// Creates a new `Conflict`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.Conflict.Body) {
                self.body = body
            }
        }
        internal struct PreconditionFailed: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/PreconditionFailed/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/PreconditionFailed/content/application\/json`.
                case json(Components.Schemas.ErrorResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ErrorResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.PreconditionFailed.Body
            /// Creates a new `PreconditionFailed`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.PreconditionFailed.Body) {
                self.body = body
            }
        }
        internal struct RequestEntityTooLarge: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/RequestEntityTooLarge/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/RequestEntityTooLarge/content/application\/json`.
                case json(Components.Schemas.ErrorResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ErrorResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.RequestEntityTooLarge.Body
            /// Creates a new `RequestEntityTooLarge`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.RequestEntityTooLarge.Body) {
                self.body = body
            }
        }
        internal struct TooManyRequests: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/TooManyRequests/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/TooManyRequests/content/application\/json`.
                case json(Components.Schemas.ErrorResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ErrorResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.TooManyRequests.Body
            /// Creates a new `TooManyRequests`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.TooManyRequests.Body) {
                self.body = body
            }
        }
        internal struct UnprocessableEntity: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/UnprocessableEntity/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/UnprocessableEntity/content/application\/json`.
                case json(Components.Schemas.ErrorResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ErrorResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.UnprocessableEntity.Body
            /// Creates a new `UnprocessableEntity`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.UnprocessableEntity.Body) {
                self.body = body
            }
        }
        internal struct InternalServerError: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/InternalServerError/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/InternalServerError/content/application\/json`.
                case json(Components.Schemas.ErrorResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ErrorResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.InternalServerError.Body
            /// Creates a new `InternalServerError`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.InternalServerError.Body) {
                self.body = body
            }
        }
        internal struct ServiceUnavailable: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/ServiceUnavailable/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/ServiceUnavailable/content/application\/json`.
                case json(Components.Schemas.ErrorResponse)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                internal var json: Components.Schemas.ErrorResponse {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.ServiceUnavailable.Body
            /// Creates a new `ServiceUnavailable`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            internal init(body: Components.Responses.ServiceUnavailable.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    internal enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
internal enum Operations {
    /// Query Records
    ///
    /// Fetch records using a query with filters and sorting options
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/records/query`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/query/post(queryRecords)`.
    internal enum queryRecords {
        internal static let id: Swift.String = "queryRecords"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/path/version`.
                internal var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/path/container`.
                internal var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                internal enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/path/environment`.
                internal var environment: Components.Parameters.environment
                /// Database scope
                ///
                /// - Remark: Generated from `#/components/parameters/database`.
                internal enum database: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case shared = "shared"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/path/database`.
                internal var database: Components.Parameters.database
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                ///   - database:
                internal init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment,
                    database: Components.Parameters.database
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                    self.database = database
                }
            }
            internal var path: Operations.queryRecords.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.queryRecords.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.queryRecords.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.queryRecords.Input.Headers
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/requestBody/json/zoneID`.
                    internal var zoneID: Components.Schemas.ZoneID?
                    /// Maximum number of records to return
                    ///
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/requestBody/json/resultsLimit`.
                    internal var resultsLimit: Swift.Int?
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/requestBody/json/query`.
                    internal struct queryPayload: Codable, Hashable, Sendable {
                        /// The record type to query
                        ///
                        /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/requestBody/json/query/recordType`.
                        internal var recordType: Swift.String?
                        /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/requestBody/json/query/filterBy`.
                        internal var filterBy: [Components.Schemas.Filter]?
                        /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/requestBody/json/query/sortBy`.
                        internal var sortBy: [Components.Schemas.Sort]?
                        /// Creates a new `queryPayload`.
                        ///
                        /// - Parameters:
                        ///   - recordType: The record type to query
                        ///   - filterBy:
                        ///   - sortBy:
                        internal init(
                            recordType: Swift.String? = nil,
                            filterBy: [Components.Schemas.Filter]? = nil,
                            sortBy: [Components.Schemas.Sort]? = nil
                        ) {
                            self.recordType = recordType
                            self.filterBy = filterBy
                            self.sortBy = sortBy
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case recordType
                            case filterBy
                            case sortBy
                        }
                    }
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/requestBody/json/query`.
                    internal var query: Operations.queryRecords.Input.Body.jsonPayload.queryPayload?
                    /// List of field names to return
                    ///
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/requestBody/json/desiredKeys`.
                    internal var desiredKeys: [Swift.String]?
                    /// Marker for pagination
                    ///
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/requestBody/json/continuationMarker`.
                    internal var continuationMarker: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - zoneID:
                    ///   - resultsLimit: Maximum number of records to return
                    ///   - query:
                    ///   - desiredKeys: List of field names to return
                    ///   - continuationMarker: Marker for pagination
                    internal init(
                        zoneID: Components.Schemas.ZoneID? = nil,
                        resultsLimit: Swift.Int? = nil,
                        query: Operations.queryRecords.Input.Body.jsonPayload.queryPayload? = nil,
                        desiredKeys: [Swift.String]? = nil,
                        continuationMarker: Swift.String? = nil
                    ) {
                        self.zoneID = zoneID
                        self.resultsLimit = resultsLimit
                        self.query = query
                        self.desiredKeys = desiredKeys
                        self.continuationMarker = continuationMarker
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case zoneID
                        case resultsLimit
                        case query
                        case desiredKeys
                        case continuationMarker
                    }
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/requestBody/content/application\/json`.
                case json(Operations.queryRecords.Input.Body.jsonPayload)
            }
            internal var body: Operations.queryRecords.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.queryRecords.Input.Path,
                headers: Operations.queryRecords.Input.Headers = .init(),
                body: Operations.queryRecords.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/query/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.QueryResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.QueryResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.queryRecords.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.queryRecords.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful query
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/query/post(queryRecords)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.queryRecords.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.queryRecords.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request (400) - BAD_REQUEST, ATOMIC_ERROR
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/query/post(queryRecords)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized (401) - AUTHENTICATION_FAILED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/query/post(queryRecords)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden (403) - ACCESS_DENIED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/query/post(queryRecords)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            internal var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Not found (404) - NOT_FOUND, ZONE_NOT_FOUND
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/query/post(queryRecords)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Conflict (409) - CONFLICT, EXISTS
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/query/post(queryRecords)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Components.Responses.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Precondition failed (412) - VALIDATING_REFERENCE_ERROR
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/query/post(queryRecords)/responses/412`.
            ///
            /// HTTP response code: `412 preconditionFailed`.
            case preconditionFailed(Components.Responses.PreconditionFailed)
            /// The associated value of the enum case if `self` is `.preconditionFailed`.
            ///
            /// - Throws: An error if `self` is not `.preconditionFailed`.
            /// - SeeAlso: `.preconditionFailed`.
            internal var preconditionFailed: Components.Responses.PreconditionFailed {
                get throws {
                    switch self {
                    case let .preconditionFailed(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "preconditionFailed",
                            response: self
                        )
                    }
                }
            }
            /// Request entity too large (413) - QUOTA_EXCEEDED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/query/post(queryRecords)/responses/413`.
            ///
            /// HTTP response code: `413 contentTooLarge`.
            case contentTooLarge(Components.Responses.RequestEntityTooLarge)
            /// The associated value of the enum case if `self` is `.contentTooLarge`.
            ///
            /// - Throws: An error if `self` is not `.contentTooLarge`.
            /// - SeeAlso: `.contentTooLarge`.
            internal var contentTooLarge: Components.Responses.RequestEntityTooLarge {
                get throws {
                    switch self {
                    case let .contentTooLarge(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "contentTooLarge",
                            response: self
                        )
                    }
                }
            }
            /// Too many requests (429) - THROTTLED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/query/post(queryRecords)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            internal var tooManyRequests: Components.Responses.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Unprocessable entity (421) - AUTHENTICATION_REQUIRED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/query/post(queryRecords)/responses/421`.
            ///
            /// HTTP response code: `421 misdirectedRequest`.
            case misdirectedRequest(Components.Responses.UnprocessableEntity)
            /// The associated value of the enum case if `self` is `.misdirectedRequest`.
            ///
            /// - Throws: An error if `self` is not `.misdirectedRequest`.
            /// - SeeAlso: `.misdirectedRequest`.
            internal var misdirectedRequest: Components.Responses.UnprocessableEntity {
                get throws {
                    switch self {
                    case let .misdirectedRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "misdirectedRequest",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error (500) - INTERNAL_ERROR
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/query/post(queryRecords)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable (503) - TRY_AGAIN_LATER
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/query/post(queryRecords)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            internal var serviceUnavailable: Components.Responses.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Modify Records
    ///
    /// Create, update, or delete records (supports bulk operations)
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/records/modify`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/modify/post(modifyRecords)`.
    internal enum modifyRecords {
        internal static let id: Swift.String = "modifyRecords"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/modify/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/modify/POST/path/version`.
                internal var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/modify/POST/path/container`.
                internal var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                internal enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/modify/POST/path/environment`.
                internal var environment: Components.Parameters.environment
                /// Database scope
                ///
                /// - Remark: Generated from `#/components/parameters/database`.
                internal enum database: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case shared = "shared"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/modify/POST/path/database`.
                internal var database: Components.Parameters.database
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                ///   - database:
                internal init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment,
                    database: Components.Parameters.database
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                    self.database = database
                }
            }
            internal var path: Operations.modifyRecords.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/modify/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.modifyRecords.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.modifyRecords.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.modifyRecords.Input.Headers
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/modify/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/modify/POST/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/modify/POST/requestBody/json/operations`.
                    internal var operations: [Components.Schemas.RecordOperation]?
                    /// If true, all operations must succeed or all fail
                    ///
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/modify/POST/requestBody/json/atomic`.
                    internal var atomic: Swift.Bool?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - operations:
                    ///   - atomic: If true, all operations must succeed or all fail
                    internal init(
                        operations: [Components.Schemas.RecordOperation]? = nil,
                        atomic: Swift.Bool? = nil
                    ) {
                        self.operations = operations
                        self.atomic = atomic
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case operations
                        case atomic
                    }
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/modify/POST/requestBody/content/application\/json`.
                case json(Operations.modifyRecords.Input.Body.jsonPayload)
            }
            internal var body: Operations.modifyRecords.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.modifyRecords.Input.Path,
                headers: Operations.modifyRecords.Input.Headers = .init(),
                body: Operations.modifyRecords.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/modify/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/modify/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ModifyResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ModifyResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.modifyRecords.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.modifyRecords.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Records modified successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/modify/post(modifyRecords)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.modifyRecords.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.modifyRecords.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request (400) - BAD_REQUEST, ATOMIC_ERROR
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/modify/post(modifyRecords)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized (401) - AUTHENTICATION_FAILED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/modify/post(modifyRecords)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden (403) - ACCESS_DENIED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/modify/post(modifyRecords)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            internal var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Not found (404) - NOT_FOUND, ZONE_NOT_FOUND
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/modify/post(modifyRecords)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Conflict (409) - CONFLICT, EXISTS
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/modify/post(modifyRecords)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Components.Responses.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Precondition failed (412) - VALIDATING_REFERENCE_ERROR
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/modify/post(modifyRecords)/responses/412`.
            ///
            /// HTTP response code: `412 preconditionFailed`.
            case preconditionFailed(Components.Responses.PreconditionFailed)
            /// The associated value of the enum case if `self` is `.preconditionFailed`.
            ///
            /// - Throws: An error if `self` is not `.preconditionFailed`.
            /// - SeeAlso: `.preconditionFailed`.
            internal var preconditionFailed: Components.Responses.PreconditionFailed {
                get throws {
                    switch self {
                    case let .preconditionFailed(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "preconditionFailed",
                            response: self
                        )
                    }
                }
            }
            /// Request entity too large (413) - QUOTA_EXCEEDED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/modify/post(modifyRecords)/responses/413`.
            ///
            /// HTTP response code: `413 contentTooLarge`.
            case contentTooLarge(Components.Responses.RequestEntityTooLarge)
            /// The associated value of the enum case if `self` is `.contentTooLarge`.
            ///
            /// - Throws: An error if `self` is not `.contentTooLarge`.
            /// - SeeAlso: `.contentTooLarge`.
            internal var contentTooLarge: Components.Responses.RequestEntityTooLarge {
                get throws {
                    switch self {
                    case let .contentTooLarge(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "contentTooLarge",
                            response: self
                        )
                    }
                }
            }
            /// Too many requests (429) - THROTTLED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/modify/post(modifyRecords)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            internal var tooManyRequests: Components.Responses.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Unprocessable entity (421) - AUTHENTICATION_REQUIRED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/modify/post(modifyRecords)/responses/421`.
            ///
            /// HTTP response code: `421 misdirectedRequest`.
            case misdirectedRequest(Components.Responses.UnprocessableEntity)
            /// The associated value of the enum case if `self` is `.misdirectedRequest`.
            ///
            /// - Throws: An error if `self` is not `.misdirectedRequest`.
            /// - SeeAlso: `.misdirectedRequest`.
            internal var misdirectedRequest: Components.Responses.UnprocessableEntity {
                get throws {
                    switch self {
                    case let .misdirectedRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "misdirectedRequest",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error (500) - INTERNAL_ERROR
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/modify/post(modifyRecords)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable (503) - TRY_AGAIN_LATER
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/modify/post(modifyRecords)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            internal var serviceUnavailable: Components.Responses.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Lookup Records
    ///
    /// Fetch specific records by their IDs
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/records/lookup`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/lookup/post(lookupRecords)`.
    internal enum lookupRecords {
        internal static let id: Swift.String = "lookupRecords"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/lookup/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/lookup/POST/path/version`.
                internal var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/lookup/POST/path/container`.
                internal var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                internal enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/lookup/POST/path/environment`.
                internal var environment: Components.Parameters.environment
                /// Database scope
                ///
                /// - Remark: Generated from `#/components/parameters/database`.
                internal enum database: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case shared = "shared"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/lookup/POST/path/database`.
                internal var database: Components.Parameters.database
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                ///   - database:
                internal init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment,
                    database: Components.Parameters.database
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                    self.database = database
                }
            }
            internal var path: Operations.lookupRecords.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/lookup/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.lookupRecords.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.lookupRecords.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.lookupRecords.Input.Headers
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/lookup/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/lookup/POST/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/lookup/POST/requestBody/json/recordsPayload`.
                    internal struct recordsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/lookup/POST/requestBody/json/recordsPayload/recordName`.
                        internal var recordName: Swift.String?
                        /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/lookup/POST/requestBody/json/recordsPayload/desiredKeys`.
                        internal var desiredKeys: [Swift.String]?
                        /// Creates a new `recordsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - recordName:
                        ///   - desiredKeys:
                        internal init(
                            recordName: Swift.String? = nil,
                            desiredKeys: [Swift.String]? = nil
                        ) {
                            self.recordName = recordName
                            self.desiredKeys = desiredKeys
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case recordName
                            case desiredKeys
                        }
                    }
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/lookup/POST/requestBody/json/records`.
                    internal typealias recordsPayload = [Operations.lookupRecords.Input.Body.jsonPayload.recordsPayloadPayload]
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/lookup/POST/requestBody/json/records`.
                    internal var records: Operations.lookupRecords.Input.Body.jsonPayload.recordsPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - records:
                    internal init(records: Operations.lookupRecords.Input.Body.jsonPayload.recordsPayload? = nil) {
                        self.records = records
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case records
                    }
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/lookup/POST/requestBody/content/application\/json`.
                case json(Operations.lookupRecords.Input.Body.jsonPayload)
            }
            internal var body: Operations.lookupRecords.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.lookupRecords.Input.Path,
                headers: Operations.lookupRecords.Input.Headers = .init(),
                body: Operations.lookupRecords.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/lookup/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/lookup/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.LookupResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.LookupResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.lookupRecords.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.lookupRecords.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Records retrieved successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/lookup/post(lookupRecords)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.lookupRecords.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.lookupRecords.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request (400) - BAD_REQUEST, ATOMIC_ERROR
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/lookup/post(lookupRecords)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized (401) - AUTHENTICATION_FAILED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/lookup/post(lookupRecords)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden (403) - ACCESS_DENIED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/lookup/post(lookupRecords)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            internal var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Not found (404) - NOT_FOUND, ZONE_NOT_FOUND
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/lookup/post(lookupRecords)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Conflict (409) - CONFLICT, EXISTS
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/lookup/post(lookupRecords)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Components.Responses.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Precondition failed (412) - VALIDATING_REFERENCE_ERROR
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/lookup/post(lookupRecords)/responses/412`.
            ///
            /// HTTP response code: `412 preconditionFailed`.
            case preconditionFailed(Components.Responses.PreconditionFailed)
            /// The associated value of the enum case if `self` is `.preconditionFailed`.
            ///
            /// - Throws: An error if `self` is not `.preconditionFailed`.
            /// - SeeAlso: `.preconditionFailed`.
            internal var preconditionFailed: Components.Responses.PreconditionFailed {
                get throws {
                    switch self {
                    case let .preconditionFailed(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "preconditionFailed",
                            response: self
                        )
                    }
                }
            }
            /// Request entity too large (413) - QUOTA_EXCEEDED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/lookup/post(lookupRecords)/responses/413`.
            ///
            /// HTTP response code: `413 contentTooLarge`.
            case contentTooLarge(Components.Responses.RequestEntityTooLarge)
            /// The associated value of the enum case if `self` is `.contentTooLarge`.
            ///
            /// - Throws: An error if `self` is not `.contentTooLarge`.
            /// - SeeAlso: `.contentTooLarge`.
            internal var contentTooLarge: Components.Responses.RequestEntityTooLarge {
                get throws {
                    switch self {
                    case let .contentTooLarge(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "contentTooLarge",
                            response: self
                        )
                    }
                }
            }
            /// Too many requests (429) - THROTTLED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/lookup/post(lookupRecords)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            internal var tooManyRequests: Components.Responses.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Unprocessable entity (421) - AUTHENTICATION_REQUIRED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/lookup/post(lookupRecords)/responses/421`.
            ///
            /// HTTP response code: `421 misdirectedRequest`.
            case misdirectedRequest(Components.Responses.UnprocessableEntity)
            /// The associated value of the enum case if `self` is `.misdirectedRequest`.
            ///
            /// - Throws: An error if `self` is not `.misdirectedRequest`.
            /// - SeeAlso: `.misdirectedRequest`.
            internal var misdirectedRequest: Components.Responses.UnprocessableEntity {
                get throws {
                    switch self {
                    case let .misdirectedRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "misdirectedRequest",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error (500) - INTERNAL_ERROR
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/lookup/post(lookupRecords)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable (503) - TRY_AGAIN_LATER
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/lookup/post(lookupRecords)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            internal var serviceUnavailable: Components.Responses.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Fetch Record Changes
    ///
    /// Get all record changes relative to a sync token
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/records/changes`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/changes/post(fetchRecordChanges)`.
    internal enum fetchRecordChanges {
        internal static let id: Swift.String = "fetchRecordChanges"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/changes/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/changes/POST/path/version`.
                internal var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/changes/POST/path/container`.
                internal var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                internal enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/changes/POST/path/environment`.
                internal var environment: Components.Parameters.environment
                /// Database scope
                ///
                /// - Remark: Generated from `#/components/parameters/database`.
                internal enum database: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case shared = "shared"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/changes/POST/path/database`.
                internal var database: Components.Parameters.database
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                ///   - database:
                internal init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment,
                    database: Components.Parameters.database
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                    self.database = database
                }
            }
            internal var path: Operations.fetchRecordChanges.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/changes/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fetchRecordChanges.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fetchRecordChanges.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.fetchRecordChanges.Input.Headers
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/changes/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/changes/POST/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/changes/POST/requestBody/json/zoneID`.
                    internal var zoneID: Components.Schemas.ZoneID?
                    /// Token from previous sync operation
                    ///
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/changes/POST/requestBody/json/syncToken`.
                    internal var syncToken: Swift.String?
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/changes/POST/requestBody/json/resultsLimit`.
                    internal var resultsLimit: Swift.Int?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - zoneID:
                    ///   - syncToken: Token from previous sync operation
                    ///   - resultsLimit:
                    internal init(
                        zoneID: Components.Schemas.ZoneID? = nil,
                        syncToken: Swift.String? = nil,
                        resultsLimit: Swift.Int? = nil
                    ) {
                        self.zoneID = zoneID
                        self.syncToken = syncToken
                        self.resultsLimit = resultsLimit
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case zoneID
                        case syncToken
                        case resultsLimit
                    }
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/changes/POST/requestBody/content/application\/json`.
                case json(Operations.fetchRecordChanges.Input.Body.jsonPayload)
            }
            internal var body: Operations.fetchRecordChanges.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.fetchRecordChanges.Input.Path,
                headers: Operations.fetchRecordChanges.Input.Headers = .init(),
                body: Operations.fetchRecordChanges.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/changes/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/records/changes/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ChangesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ChangesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.fetchRecordChanges.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.fetchRecordChanges.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Changes retrieved successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/changes/post(fetchRecordChanges)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.fetchRecordChanges.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.fetchRecordChanges.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request (400) - BAD_REQUEST, ATOMIC_ERROR
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/changes/post(fetchRecordChanges)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized (401) - AUTHENTICATION_FAILED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/changes/post(fetchRecordChanges)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden (403) - ACCESS_DENIED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/changes/post(fetchRecordChanges)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            internal var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Not found (404) - NOT_FOUND, ZONE_NOT_FOUND
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/changes/post(fetchRecordChanges)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Conflict (409) - CONFLICT, EXISTS
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/changes/post(fetchRecordChanges)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Components.Responses.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Precondition failed (412) - VALIDATING_REFERENCE_ERROR
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/changes/post(fetchRecordChanges)/responses/412`.
            ///
            /// HTTP response code: `412 preconditionFailed`.
            case preconditionFailed(Components.Responses.PreconditionFailed)
            /// The associated value of the enum case if `self` is `.preconditionFailed`.
            ///
            /// - Throws: An error if `self` is not `.preconditionFailed`.
            /// - SeeAlso: `.preconditionFailed`.
            internal var preconditionFailed: Components.Responses.PreconditionFailed {
                get throws {
                    switch self {
                    case let .preconditionFailed(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "preconditionFailed",
                            response: self
                        )
                    }
                }
            }
            /// Request entity too large (413) - QUOTA_EXCEEDED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/changes/post(fetchRecordChanges)/responses/413`.
            ///
            /// HTTP response code: `413 contentTooLarge`.
            case contentTooLarge(Components.Responses.RequestEntityTooLarge)
            /// The associated value of the enum case if `self` is `.contentTooLarge`.
            ///
            /// - Throws: An error if `self` is not `.contentTooLarge`.
            /// - SeeAlso: `.contentTooLarge`.
            internal var contentTooLarge: Components.Responses.RequestEntityTooLarge {
                get throws {
                    switch self {
                    case let .contentTooLarge(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "contentTooLarge",
                            response: self
                        )
                    }
                }
            }
            /// Too many requests (429) - THROTTLED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/changes/post(fetchRecordChanges)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            internal var tooManyRequests: Components.Responses.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Unprocessable entity (421) - AUTHENTICATION_REQUIRED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/changes/post(fetchRecordChanges)/responses/421`.
            ///
            /// HTTP response code: `421 misdirectedRequest`.
            case misdirectedRequest(Components.Responses.UnprocessableEntity)
            /// The associated value of the enum case if `self` is `.misdirectedRequest`.
            ///
            /// - Throws: An error if `self` is not `.misdirectedRequest`.
            /// - SeeAlso: `.misdirectedRequest`.
            internal var misdirectedRequest: Components.Responses.UnprocessableEntity {
                get throws {
                    switch self {
                    case let .misdirectedRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "misdirectedRequest",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error (500) - INTERNAL_ERROR
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/changes/post(fetchRecordChanges)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable (503) - TRY_AGAIN_LATER
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/records/changes/post(fetchRecordChanges)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            internal var serviceUnavailable: Components.Responses.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List All Zones
    ///
    /// Fetch all zones in the database
    ///
    /// - Remark: HTTP `GET /database/{version}/{container}/{environment}/{database}/zones/list`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/list/get(listZones)`.
    internal enum listZones {
        internal static let id: Swift.String = "listZones"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/list/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/list/GET/path/version`.
                internal var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/list/GET/path/container`.
                internal var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                internal enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/list/GET/path/environment`.
                internal var environment: Components.Parameters.environment
                /// Database scope
                ///
                /// - Remark: Generated from `#/components/parameters/database`.
                internal enum database: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case shared = "shared"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/list/GET/path/database`.
                internal var database: Components.Parameters.database
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                ///   - database:
                internal init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment,
                    database: Components.Parameters.database
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                    self.database = database
                }
            }
            internal var path: Operations.listZones.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/list/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listZones.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listZones.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.listZones.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.listZones.Input.Path,
                headers: Operations.listZones.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/list/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/list/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ZonesListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ZonesListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.listZones.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.listZones.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Zones retrieved successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/list/get(listZones)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.listZones.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.listZones.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request (400) - BAD_REQUEST, ATOMIC_ERROR
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/list/get(listZones)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized (401) - AUTHENTICATION_FAILED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/list/get(listZones)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden (403) - ACCESS_DENIED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/list/get(listZones)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            internal var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Not found (404) - NOT_FOUND, ZONE_NOT_FOUND
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/list/get(listZones)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Conflict (409) - CONFLICT, EXISTS
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/list/get(listZones)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Components.Responses.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Precondition failed (412) - VALIDATING_REFERENCE_ERROR
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/list/get(listZones)/responses/412`.
            ///
            /// HTTP response code: `412 preconditionFailed`.
            case preconditionFailed(Components.Responses.PreconditionFailed)
            /// The associated value of the enum case if `self` is `.preconditionFailed`.
            ///
            /// - Throws: An error if `self` is not `.preconditionFailed`.
            /// - SeeAlso: `.preconditionFailed`.
            internal var preconditionFailed: Components.Responses.PreconditionFailed {
                get throws {
                    switch self {
                    case let .preconditionFailed(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "preconditionFailed",
                            response: self
                        )
                    }
                }
            }
            /// Request entity too large (413) - QUOTA_EXCEEDED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/list/get(listZones)/responses/413`.
            ///
            /// HTTP response code: `413 contentTooLarge`.
            case contentTooLarge(Components.Responses.RequestEntityTooLarge)
            /// The associated value of the enum case if `self` is `.contentTooLarge`.
            ///
            /// - Throws: An error if `self` is not `.contentTooLarge`.
            /// - SeeAlso: `.contentTooLarge`.
            internal var contentTooLarge: Components.Responses.RequestEntityTooLarge {
                get throws {
                    switch self {
                    case let .contentTooLarge(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "contentTooLarge",
                            response: self
                        )
                    }
                }
            }
            /// Too many requests (429) - THROTTLED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/list/get(listZones)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            internal var tooManyRequests: Components.Responses.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Unprocessable entity (421) - AUTHENTICATION_REQUIRED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/list/get(listZones)/responses/421`.
            ///
            /// HTTP response code: `421 misdirectedRequest`.
            case misdirectedRequest(Components.Responses.UnprocessableEntity)
            /// The associated value of the enum case if `self` is `.misdirectedRequest`.
            ///
            /// - Throws: An error if `self` is not `.misdirectedRequest`.
            /// - SeeAlso: `.misdirectedRequest`.
            internal var misdirectedRequest: Components.Responses.UnprocessableEntity {
                get throws {
                    switch self {
                    case let .misdirectedRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "misdirectedRequest",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error (500) - INTERNAL_ERROR
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/list/get(listZones)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable (503) - TRY_AGAIN_LATER
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/list/get(listZones)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            internal var serviceUnavailable: Components.Responses.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Lookup Zones
    ///
    /// Fetch specific zones by their IDs
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/zones/lookup`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/lookup/post(lookupZones)`.
    internal enum lookupZones {
        internal static let id: Swift.String = "lookupZones"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/lookup/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/lookup/POST/path/version`.
                internal var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/lookup/POST/path/container`.
                internal var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                internal enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/lookup/POST/path/environment`.
                internal var environment: Components.Parameters.environment
                /// Database scope
                ///
                /// - Remark: Generated from `#/components/parameters/database`.
                internal enum database: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case shared = "shared"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/lookup/POST/path/database`.
                internal var database: Components.Parameters.database
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                ///   - database:
                internal init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment,
                    database: Components.Parameters.database
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                    self.database = database
                }
            }
            internal var path: Operations.lookupZones.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/lookup/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.lookupZones.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.lookupZones.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.lookupZones.Input.Headers
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/lookup/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/lookup/POST/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/lookup/POST/requestBody/json/zones`.
                    internal var zones: [Components.Schemas.ZoneID]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - zones:
                    internal init(zones: [Components.Schemas.ZoneID]? = nil) {
                        self.zones = zones
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case zones
                    }
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/lookup/POST/requestBody/content/application\/json`.
                case json(Operations.lookupZones.Input.Body.jsonPayload)
            }
            internal var body: Operations.lookupZones.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.lookupZones.Input.Path,
                headers: Operations.lookupZones.Input.Headers = .init(),
                body: Operations.lookupZones.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/lookup/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/lookup/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ZonesLookupResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ZonesLookupResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.lookupZones.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.lookupZones.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Zones retrieved successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/lookup/post(lookupZones)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.lookupZones.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.lookupZones.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request (400) - BAD_REQUEST, ATOMIC_ERROR
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/lookup/post(lookupZones)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized (401) - AUTHENTICATION_FAILED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/lookup/post(lookupZones)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Modify Zones
    ///
    /// Create or delete zones (only supported in private database)
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/zones/modify`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/modify/post(modifyZones)`.
    internal enum modifyZones {
        internal static let id: Swift.String = "modifyZones"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/modify/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/modify/POST/path/version`.
                internal var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/modify/POST/path/container`.
                internal var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                internal enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/modify/POST/path/environment`.
                internal var environment: Components.Parameters.environment
                /// Database scope
                ///
                /// - Remark: Generated from `#/components/parameters/database`.
                internal enum database: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case shared = "shared"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/modify/POST/path/database`.
                internal var database: Components.Parameters.database
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                ///   - database:
                internal init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment,
                    database: Components.Parameters.database
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                    self.database = database
                }
            }
            internal var path: Operations.modifyZones.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/modify/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.modifyZones.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.modifyZones.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.modifyZones.Input.Headers
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/modify/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/modify/POST/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/modify/POST/requestBody/json/operations`.
                    internal var operations: [Components.Schemas.ZoneOperation]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - operations:
                    internal init(operations: [Components.Schemas.ZoneOperation]? = nil) {
                        self.operations = operations
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case operations
                    }
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/modify/POST/requestBody/content/application\/json`.
                case json(Operations.modifyZones.Input.Body.jsonPayload)
            }
            internal var body: Operations.modifyZones.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.modifyZones.Input.Path,
                headers: Operations.modifyZones.Input.Headers = .init(),
                body: Operations.modifyZones.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/modify/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/modify/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ZonesModifyResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ZonesModifyResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.modifyZones.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.modifyZones.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Zones modified successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/modify/post(modifyZones)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.modifyZones.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.modifyZones.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request (400) - BAD_REQUEST, ATOMIC_ERROR
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/modify/post(modifyZones)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized (401) - AUTHENTICATION_FAILED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/modify/post(modifyZones)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Fetch Zone Changes
    ///
    /// Get all changed zones relative to a meta-sync token
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/zones/changes`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/changes/post(fetchZoneChanges)`.
    internal enum fetchZoneChanges {
        internal static let id: Swift.String = "fetchZoneChanges"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/changes/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/changes/POST/path/version`.
                internal var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/changes/POST/path/container`.
                internal var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                internal enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/changes/POST/path/environment`.
                internal var environment: Components.Parameters.environment
                /// Database scope
                ///
                /// - Remark: Generated from `#/components/parameters/database`.
                internal enum database: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case shared = "shared"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/changes/POST/path/database`.
                internal var database: Components.Parameters.database
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                ///   - database:
                internal init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment,
                    database: Components.Parameters.database
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                    self.database = database
                }
            }
            internal var path: Operations.fetchZoneChanges.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/changes/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fetchZoneChanges.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fetchZoneChanges.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.fetchZoneChanges.Input.Headers
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/changes/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/changes/POST/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// Meta-sync token from previous operation
                    ///
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/changes/POST/requestBody/json/syncToken`.
                    internal var syncToken: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - syncToken: Meta-sync token from previous operation
                    internal init(syncToken: Swift.String? = nil) {
                        self.syncToken = syncToken
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case syncToken
                    }
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/changes/POST/requestBody/content/application\/json`.
                case json(Operations.fetchZoneChanges.Input.Body.jsonPayload)
            }
            internal var body: Operations.fetchZoneChanges.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.fetchZoneChanges.Input.Path,
                headers: Operations.fetchZoneChanges.Input.Headers = .init(),
                body: Operations.fetchZoneChanges.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/changes/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/zones/changes/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ZoneChangesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ZoneChangesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.fetchZoneChanges.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.fetchZoneChanges.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Zone changes retrieved successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/changes/post(fetchZoneChanges)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.fetchZoneChanges.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.fetchZoneChanges.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request (400) - BAD_REQUEST, ATOMIC_ERROR
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/changes/post(fetchZoneChanges)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized (401) - AUTHENTICATION_FAILED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/zones/changes/post(fetchZoneChanges)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List All Subscriptions
    ///
    /// Fetch all subscriptions in the database
    ///
    /// - Remark: HTTP `GET /database/{version}/{container}/{environment}/{database}/subscriptions/list`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/list/get(listSubscriptions)`.
    internal enum listSubscriptions {
        internal static let id: Swift.String = "listSubscriptions"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/list/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/list/GET/path/version`.
                internal var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/list/GET/path/container`.
                internal var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                internal enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/list/GET/path/environment`.
                internal var environment: Components.Parameters.environment
                /// Database scope
                ///
                /// - Remark: Generated from `#/components/parameters/database`.
                internal enum database: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case shared = "shared"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/list/GET/path/database`.
                internal var database: Components.Parameters.database
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                ///   - database:
                internal init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment,
                    database: Components.Parameters.database
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                    self.database = database
                }
            }
            internal var path: Operations.listSubscriptions.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/list/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listSubscriptions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listSubscriptions.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.listSubscriptions.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.listSubscriptions.Input.Path,
                headers: Operations.listSubscriptions.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/list/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/list/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.SubscriptionsListResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.SubscriptionsListResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.listSubscriptions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.listSubscriptions.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Subscriptions retrieved successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/list/get(listSubscriptions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.listSubscriptions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.listSubscriptions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request (400) - BAD_REQUEST, ATOMIC_ERROR
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/list/get(listSubscriptions)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized (401) - AUTHENTICATION_FAILED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/list/get(listSubscriptions)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Lookup Subscriptions
    ///
    /// Fetch specific subscriptions by their IDs
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/subscriptions/lookup`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/lookup/post(lookupSubscriptions)`.
    internal enum lookupSubscriptions {
        internal static let id: Swift.String = "lookupSubscriptions"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/lookup/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/lookup/POST/path/version`.
                internal var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/lookup/POST/path/container`.
                internal var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                internal enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/lookup/POST/path/environment`.
                internal var environment: Components.Parameters.environment
                /// Database scope
                ///
                /// - Remark: Generated from `#/components/parameters/database`.
                internal enum database: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case shared = "shared"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/lookup/POST/path/database`.
                internal var database: Components.Parameters.database
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                ///   - database:
                internal init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment,
                    database: Components.Parameters.database
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                    self.database = database
                }
            }
            internal var path: Operations.lookupSubscriptions.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/lookup/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.lookupSubscriptions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.lookupSubscriptions.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.lookupSubscriptions.Input.Headers
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/lookup/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/lookup/POST/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/lookup/POST/requestBody/json/subscriptionsPayload`.
                    internal struct subscriptionsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/lookup/POST/requestBody/json/subscriptionsPayload/subscriptionID`.
                        internal var subscriptionID: Swift.String?
                        /// Creates a new `subscriptionsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - subscriptionID:
                        internal init(subscriptionID: Swift.String? = nil) {
                            self.subscriptionID = subscriptionID
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case subscriptionID
                        }
                    }
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/lookup/POST/requestBody/json/subscriptions`.
                    internal typealias subscriptionsPayload = [Operations.lookupSubscriptions.Input.Body.jsonPayload.subscriptionsPayloadPayload]
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/lookup/POST/requestBody/json/subscriptions`.
                    internal var subscriptions: Operations.lookupSubscriptions.Input.Body.jsonPayload.subscriptionsPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - subscriptions:
                    internal init(subscriptions: Operations.lookupSubscriptions.Input.Body.jsonPayload.subscriptionsPayload? = nil) {
                        self.subscriptions = subscriptions
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case subscriptions
                    }
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/lookup/POST/requestBody/content/application\/json`.
                case json(Operations.lookupSubscriptions.Input.Body.jsonPayload)
            }
            internal var body: Operations.lookupSubscriptions.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.lookupSubscriptions.Input.Path,
                headers: Operations.lookupSubscriptions.Input.Headers = .init(),
                body: Operations.lookupSubscriptions.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/lookup/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/lookup/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.SubscriptionsLookupResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.SubscriptionsLookupResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.lookupSubscriptions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.lookupSubscriptions.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Subscriptions retrieved successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/lookup/post(lookupSubscriptions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.lookupSubscriptions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.lookupSubscriptions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request (400) - BAD_REQUEST, ATOMIC_ERROR
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/lookup/post(lookupSubscriptions)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized (401) - AUTHENTICATION_FAILED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/lookup/post(lookupSubscriptions)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Modify Subscriptions
    ///
    /// Create, update, or delete subscriptions
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/subscriptions/modify`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/modify/post(modifySubscriptions)`.
    internal enum modifySubscriptions {
        internal static let id: Swift.String = "modifySubscriptions"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/modify/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/modify/POST/path/version`.
                internal var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/modify/POST/path/container`.
                internal var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                internal enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/modify/POST/path/environment`.
                internal var environment: Components.Parameters.environment
                /// Database scope
                ///
                /// - Remark: Generated from `#/components/parameters/database`.
                internal enum database: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case shared = "shared"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/modify/POST/path/database`.
                internal var database: Components.Parameters.database
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                ///   - database:
                internal init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment,
                    database: Components.Parameters.database
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                    self.database = database
                }
            }
            internal var path: Operations.modifySubscriptions.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/modify/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.modifySubscriptions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.modifySubscriptions.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.modifySubscriptions.Input.Headers
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/modify/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/modify/POST/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/modify/POST/requestBody/json/operations`.
                    internal var operations: [Components.Schemas.SubscriptionOperation]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - operations:
                    internal init(operations: [Components.Schemas.SubscriptionOperation]? = nil) {
                        self.operations = operations
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case operations
                    }
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/modify/POST/requestBody/content/application\/json`.
                case json(Operations.modifySubscriptions.Input.Body.jsonPayload)
            }
            internal var body: Operations.modifySubscriptions.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.modifySubscriptions.Input.Path,
                headers: Operations.modifySubscriptions.Input.Headers = .init(),
                body: Operations.modifySubscriptions.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/modify/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/subscriptions/modify/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.SubscriptionsModifyResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.SubscriptionsModifyResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.modifySubscriptions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.modifySubscriptions.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Subscriptions modified successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/modify/post(modifySubscriptions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.modifySubscriptions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.modifySubscriptions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request (400) - BAD_REQUEST, ATOMIC_ERROR
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/modify/post(modifySubscriptions)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized (401) - AUTHENTICATION_FAILED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/subscriptions/modify/post(modifySubscriptions)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get Current User
    ///
    /// Fetch the current authenticated user's information
    ///
    /// - Remark: HTTP `GET /database/{version}/{container}/{environment}/{database}/users/current`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/users/current/get(getCurrentUser)`.
    internal enum getCurrentUser {
        internal static let id: Swift.String = "getCurrentUser"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/current/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/current/GET/path/version`.
                internal var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/current/GET/path/container`.
                internal var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                internal enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/current/GET/path/environment`.
                internal var environment: Components.Parameters.environment
                /// Database scope
                ///
                /// - Remark: Generated from `#/components/parameters/database`.
                internal enum database: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case shared = "shared"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/current/GET/path/database`.
                internal var database: Components.Parameters.database
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                ///   - database:
                internal init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment,
                    database: Components.Parameters.database
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                    self.database = database
                }
            }
            internal var path: Operations.getCurrentUser.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/current/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getCurrentUser.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getCurrentUser.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getCurrentUser.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.getCurrentUser.Input.Path,
                headers: Operations.getCurrentUser.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/current/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/current/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.UserResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.UserResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getCurrentUser.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getCurrentUser.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// User information retrieved successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/users/current/get(getCurrentUser)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getCurrentUser.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getCurrentUser.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request (400) - BAD_REQUEST, ATOMIC_ERROR
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/users/current/get(getCurrentUser)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized (401) - AUTHENTICATION_FAILED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/users/current/get(getCurrentUser)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden (403) - ACCESS_DENIED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/users/current/get(getCurrentUser)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            internal var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Not found (404) - NOT_FOUND, ZONE_NOT_FOUND
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/users/current/get(getCurrentUser)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Conflict (409) - CONFLICT, EXISTS
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/users/current/get(getCurrentUser)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Components.Responses.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Precondition failed (412) - VALIDATING_REFERENCE_ERROR
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/users/current/get(getCurrentUser)/responses/412`.
            ///
            /// HTTP response code: `412 preconditionFailed`.
            case preconditionFailed(Components.Responses.PreconditionFailed)
            /// The associated value of the enum case if `self` is `.preconditionFailed`.
            ///
            /// - Throws: An error if `self` is not `.preconditionFailed`.
            /// - SeeAlso: `.preconditionFailed`.
            internal var preconditionFailed: Components.Responses.PreconditionFailed {
                get throws {
                    switch self {
                    case let .preconditionFailed(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "preconditionFailed",
                            response: self
                        )
                    }
                }
            }
            /// Request entity too large (413) - QUOTA_EXCEEDED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/users/current/get(getCurrentUser)/responses/413`.
            ///
            /// HTTP response code: `413 contentTooLarge`.
            case contentTooLarge(Components.Responses.RequestEntityTooLarge)
            /// The associated value of the enum case if `self` is `.contentTooLarge`.
            ///
            /// - Throws: An error if `self` is not `.contentTooLarge`.
            /// - SeeAlso: `.contentTooLarge`.
            internal var contentTooLarge: Components.Responses.RequestEntityTooLarge {
                get throws {
                    switch self {
                    case let .contentTooLarge(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "contentTooLarge",
                            response: self
                        )
                    }
                }
            }
            /// Too many requests (429) - THROTTLED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/users/current/get(getCurrentUser)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            internal var tooManyRequests: Components.Responses.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Unprocessable entity (421) - AUTHENTICATION_REQUIRED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/users/current/get(getCurrentUser)/responses/421`.
            ///
            /// HTTP response code: `421 misdirectedRequest`.
            case misdirectedRequest(Components.Responses.UnprocessableEntity)
            /// The associated value of the enum case if `self` is `.misdirectedRequest`.
            ///
            /// - Throws: An error if `self` is not `.misdirectedRequest`.
            /// - SeeAlso: `.misdirectedRequest`.
            internal var misdirectedRequest: Components.Responses.UnprocessableEntity {
                get throws {
                    switch self {
                    case let .misdirectedRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "misdirectedRequest",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error (500) - INTERNAL_ERROR
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/users/current/get(getCurrentUser)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable (503) - TRY_AGAIN_LATER
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/users/current/get(getCurrentUser)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            internal var serviceUnavailable: Components.Responses.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Discover User Identities
    ///
    /// Discover all user identities based on email addresses or user record names
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/users/discover`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/users/discover/post(discoverUserIdentities)`.
    internal enum discoverUserIdentities {
        internal static let id: Swift.String = "discoverUserIdentities"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/discover/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/discover/POST/path/version`.
                internal var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/discover/POST/path/container`.
                internal var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                internal enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/discover/POST/path/environment`.
                internal var environment: Components.Parameters.environment
                /// Database scope
                ///
                /// - Remark: Generated from `#/components/parameters/database`.
                internal enum database: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case shared = "shared"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/discover/POST/path/database`.
                internal var database: Components.Parameters.database
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                ///   - database:
                internal init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment,
                    database: Components.Parameters.database
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                    self.database = database
                }
            }
            internal var path: Operations.discoverUserIdentities.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/discover/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.discoverUserIdentities.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.discoverUserIdentities.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.discoverUserIdentities.Input.Headers
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/discover/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/discover/POST/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/discover/POST/requestBody/json/usersPayload`.
                    internal struct usersPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/discover/POST/requestBody/json/usersPayload/emailAddress`.
                        internal var emailAddress: Swift.String?
                        /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/discover/POST/requestBody/json/usersPayload/userRecordName`.
                        internal var userRecordName: Swift.String?
                        /// Creates a new `usersPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - emailAddress:
                        ///   - userRecordName:
                        internal init(
                            emailAddress: Swift.String? = nil,
                            userRecordName: Swift.String? = nil
                        ) {
                            self.emailAddress = emailAddress
                            self.userRecordName = userRecordName
                        }
                        internal enum CodingKeys: String, CodingKey {
                            case emailAddress
                            case userRecordName
                        }
                    }
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/discover/POST/requestBody/json/users`.
                    internal typealias usersPayload = [Operations.discoverUserIdentities.Input.Body.jsonPayload.usersPayloadPayload]
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/discover/POST/requestBody/json/users`.
                    internal var users: Operations.discoverUserIdentities.Input.Body.jsonPayload.usersPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - users:
                    internal init(users: Operations.discoverUserIdentities.Input.Body.jsonPayload.usersPayload? = nil) {
                        self.users = users
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case users
                    }
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/discover/POST/requestBody/content/application\/json`.
                case json(Operations.discoverUserIdentities.Input.Body.jsonPayload)
            }
            internal var body: Operations.discoverUserIdentities.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.discoverUserIdentities.Input.Path,
                headers: Operations.discoverUserIdentities.Input.Headers = .init(),
                body: Operations.discoverUserIdentities.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/discover/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/discover/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.DiscoverResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.DiscoverResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.discoverUserIdentities.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.discoverUserIdentities.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// User identities discovered successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/users/discover/post(discoverUserIdentities)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.discoverUserIdentities.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.discoverUserIdentities.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request (400) - BAD_REQUEST, ATOMIC_ERROR
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/users/discover/post(discoverUserIdentities)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized (401) - AUTHENTICATION_FAILED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/users/discover/post(discoverUserIdentities)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Lookup Contacts (Deprecated)
    ///
    /// Fetch contacts (This endpoint is deprecated)
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/users/lookup/contacts`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/users/lookup/contacts/post(lookupContacts)`.
    internal enum lookupContacts {
        internal static let id: Swift.String = "lookupContacts"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/lookup/contacts/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/lookup/contacts/POST/path/version`.
                internal var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/lookup/contacts/POST/path/container`.
                internal var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                internal enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/lookup/contacts/POST/path/environment`.
                internal var environment: Components.Parameters.environment
                /// Database scope
                ///
                /// - Remark: Generated from `#/components/parameters/database`.
                internal enum database: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case shared = "shared"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/lookup/contacts/POST/path/database`.
                internal var database: Components.Parameters.database
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                ///   - database:
                internal init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment,
                    database: Components.Parameters.database
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                    self.database = database
                }
            }
            internal var path: Operations.lookupContacts.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/lookup/contacts/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.lookupContacts.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.lookupContacts.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.lookupContacts.Input.Headers
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/lookup/contacts/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/lookup/contacts/POST/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/lookup/contacts/POST/requestBody/json/contacts`.
                    internal var contacts: [OpenAPIRuntime.OpenAPIObjectContainer]?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - contacts:
                    internal init(contacts: [OpenAPIRuntime.OpenAPIObjectContainer]? = nil) {
                        self.contacts = contacts
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case contacts
                    }
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/lookup/contacts/POST/requestBody/content/application\/json`.
                case json(Operations.lookupContacts.Input.Body.jsonPayload)
            }
            internal var body: Operations.lookupContacts.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.lookupContacts.Input.Path,
                headers: Operations.lookupContacts.Input.Headers = .init(),
                body: Operations.lookupContacts.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/lookup/contacts/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/users/lookup/contacts/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ContactsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ContactsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.lookupContacts.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.lookupContacts.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Contacts retrieved successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/users/lookup/contacts/post(lookupContacts)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.lookupContacts.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.lookupContacts.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request (400) - BAD_REQUEST, ATOMIC_ERROR
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/users/lookup/contacts/post(lookupContacts)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized (401) - AUTHENTICATION_FAILED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/users/lookup/contacts/post(lookupContacts)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Upload Assets
    ///
    /// Upload binary assets to CloudKit
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/assets/upload`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/assets/upload/post(uploadAssets)`.
    internal enum uploadAssets {
        internal static let id: Swift.String = "uploadAssets"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/assets/upload/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/assets/upload/POST/path/version`.
                internal var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/assets/upload/POST/path/container`.
                internal var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                internal enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/assets/upload/POST/path/environment`.
                internal var environment: Components.Parameters.environment
                /// Database scope
                ///
                /// - Remark: Generated from `#/components/parameters/database`.
                internal enum database: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case shared = "shared"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/assets/upload/POST/path/database`.
                internal var database: Components.Parameters.database
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                ///   - database:
                internal init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment,
                    database: Components.Parameters.database
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                    self.database = database
                }
            }
            internal var path: Operations.uploadAssets.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/assets/upload/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.uploadAssets.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.uploadAssets.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.uploadAssets.Input.Headers
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/assets/upload/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/assets/upload/POST/requestBody/multipartForm`.
                internal enum multipartFormPayload: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/assets/upload/POST/requestBody/multipartForm/file`.
                    internal struct filePayload: Sendable, Hashable {
                        internal var body: OpenAPIRuntime.HTTPBody
                        /// Creates a new `filePayload`.
                        ///
                        /// - Parameters:
                        ///   - body:
                        internal init(body: OpenAPIRuntime.HTTPBody) {
                            self.body = body
                        }
                    }
                    case file(OpenAPIRuntime.MultipartPart<Operations.uploadAssets.Input.Body.multipartFormPayload.filePayload>)
                    case undocumented(OpenAPIRuntime.MultipartRawPart)
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/assets/upload/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Operations.uploadAssets.Input.Body.multipartFormPayload>)
            }
            internal var body: Operations.uploadAssets.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.uploadAssets.Input.Path,
                headers: Operations.uploadAssets.Input.Headers = .init(),
                body: Operations.uploadAssets.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/assets/upload/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/assets/upload/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AssetUploadResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.AssetUploadResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.uploadAssets.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.uploadAssets.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Asset uploaded successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/assets/upload/post(uploadAssets)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.uploadAssets.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.uploadAssets.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request (400) - BAD_REQUEST, ATOMIC_ERROR
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/assets/upload/post(uploadAssets)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized (401) - AUTHENTICATION_FAILED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/assets/upload/post(uploadAssets)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create APNs Token
    ///
    /// Create an Apple Push Notification service (APNs) token
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/tokens/create`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/tokens/create/post(createToken)`.
    internal enum createToken {
        internal static let id: Swift.String = "createToken"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/create/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/create/POST/path/version`.
                internal var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/create/POST/path/container`.
                internal var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                internal enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/create/POST/path/environment`.
                internal var environment: Components.Parameters.environment
                /// Database scope
                ///
                /// - Remark: Generated from `#/components/parameters/database`.
                internal enum database: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case shared = "shared"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/create/POST/path/database`.
                internal var database: Components.Parameters.database
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                ///   - database:
                internal init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment,
                    database: Components.Parameters.database
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                    self.database = database
                }
            }
            internal var path: Operations.createToken.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/create/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createToken.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createToken.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.createToken.Input.Headers
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/create/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/create/POST/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/create/POST/requestBody/json/apnsEnvironment`.
                    internal enum apnsEnvironmentPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case development = "development"
                        case production = "production"
                    }
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/create/POST/requestBody/json/apnsEnvironment`.
                    internal var apnsEnvironment: Operations.createToken.Input.Body.jsonPayload.apnsEnvironmentPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - apnsEnvironment:
                    internal init(apnsEnvironment: Operations.createToken.Input.Body.jsonPayload.apnsEnvironmentPayload? = nil) {
                        self.apnsEnvironment = apnsEnvironment
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case apnsEnvironment
                    }
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/create/POST/requestBody/content/application\/json`.
                case json(Operations.createToken.Input.Body.jsonPayload)
            }
            internal var body: Operations.createToken.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.createToken.Input.Path,
                headers: Operations.createToken.Input.Headers = .init(),
                body: Operations.createToken.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/create/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/create/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.TokenResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.TokenResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.createToken.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.createToken.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Token created successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/tokens/create/post(createToken)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createToken.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.createToken.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request (400) - BAD_REQUEST, ATOMIC_ERROR
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/tokens/create/post(createToken)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized (401) - AUTHENTICATION_FAILED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/tokens/create/post(createToken)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Register Token
    ///
    /// Register a token for push notifications
    ///
    /// - Remark: HTTP `POST /database/{version}/{container}/{environment}/{database}/tokens/register`.
    /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/tokens/register/post(registerToken)`.
    internal enum registerToken {
        internal static let id: Swift.String = "registerToken"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/register/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/register/POST/path/version`.
                internal var version: Components.Parameters.version
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/register/POST/path/container`.
                internal var container: Components.Parameters.container
                /// Container environment
                ///
                /// - Remark: Generated from `#/components/parameters/environment`.
                internal enum environment: String, Codable, Hashable, Sendable, CaseIterable {
                    case development = "development"
                    case production = "production"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/register/POST/path/environment`.
                internal var environment: Components.Parameters.environment
                /// Database scope
                ///
                /// - Remark: Generated from `#/components/parameters/database`.
                internal enum database: String, Codable, Hashable, Sendable, CaseIterable {
                    case _public = "public"
                    case _private = "private"
                    case shared = "shared"
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/register/POST/path/database`.
                internal var database: Components.Parameters.database
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - container:
                ///   - environment:
                ///   - database:
                internal init(
                    version: Components.Parameters.version,
                    container: Components.Parameters.container,
                    environment: Components.Parameters.environment,
                    database: Components.Parameters.database
                ) {
                    self.version = version
                    self.container = container
                    self.environment = environment
                    self.database = database
                }
            }
            internal var path: Operations.registerToken.Input.Path
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/register/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.registerToken.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.registerToken.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.registerToken.Input.Headers
            /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/register/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/register/POST/requestBody/json`.
                internal struct jsonPayload: Codable, Hashable, Sendable {
                    /// The APNs token to register
                    ///
                    /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/register/POST/requestBody/json/apnsToken`.
                    internal var apnsToken: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - apnsToken: The APNs token to register
                    internal init(apnsToken: Swift.String? = nil) {
                        self.apnsToken = apnsToken
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case apnsToken
                    }
                }
                /// - Remark: Generated from `#/paths/database/{version}/{container}/{environment}/{database}/tokens/register/POST/requestBody/content/application\/json`.
                case json(Operations.registerToken.Input.Body.jsonPayload)
            }
            internal var body: Operations.registerToken.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.registerToken.Input.Path,
                headers: Operations.registerToken.Input.Headers = .init(),
                body: Operations.registerToken.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                internal init() {}
            }
            /// Token registered successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/tokens/register/post(registerToken)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.registerToken.Output.Ok)
            /// Token registered successfully
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/tokens/register/post(registerToken)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            internal static var ok: Self {
                .ok(.init())
            }
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.registerToken.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request (400) - BAD_REQUEST, ATOMIC_ERROR
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/tokens/register/post(registerToken)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized (401) - AUTHENTICATION_FAILED
            ///
            /// - Remark: Generated from `#/paths//database/{version}/{container}/{environment}/{database}/tokens/register/post(registerToken)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
