#if !canImport(ObjectiveC)
  import XCTest

  extension CharacterMapEncoderTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CharacterMapEncoderTests = [
      ("testDefaultInit", testDefaultInit),
      ("testEncode", testEncode)
    ]
  }

  extension FetchRecordQueryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FetchRecordQueryTests = [
      ("testInit", testInit)
    ]
  }

  extension MKAnyRecordTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MKAnyRecordTests = [
      ("testInit", testInit),
      ("testMissingFields", testMissingFields),
      ("testNilIfExists", testNilIfExists),
      ("testValues", testValues),
      ("testValuesIfExists", testValuesIfExists)
    ]
  }

  extension MKDatabaseConnectionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MKDatabaseConnectionTests = [
      ("testDefaultInit", testDefaultInit),
      ("testURL", testURL)
    ]
  }

  extension MKEncoderTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MKEncoderTests = [
      ("testOptionalData", testOptionalData)
    ]
  }

  extension MKServerResponseTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MKServerResponseTests = [
      ("testInitAttemptRecoveryFromFailure", testInitAttemptRecoveryFromFailure),
      ("testInitAttemptRecoveryFromURL", testInitAttemptRecoveryFromURL),
      ("testInitFromResultFailure", testInitFromResultFailure),
      ("testInitFromResultSuccess", testInitFromResultSuccess),
      ("testInitFromResultURL", testInitFromResultURL)
    ]
  }

  extension MKTokenManagerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MKTokenManagerTests = [
      ("testRequest", testRequest),
      ("testWebAuthenticationToken", testWebAuthenticationToken)
    ]
  }

  extension RecordNameParserTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RecordNameParserTests = [
      ("testUUIDs", testUUIDs)
    ]
  }

  extension RequestConfigurationFactoryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RequestConfigurationFactoryTests = [
      ("testConfiguration", testConfiguration)
    ]
  }

  extension ResultTransformerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ResultTransformerTests = [
      ("testData", testData),
      ("testNoData", testNoData)
    ]
  }

  public func __allTests() -> [XCTestCaseEntry] {
    return [
      testCase(CharacterMapEncoderTests.__allTests__CharacterMapEncoderTests),
      testCase(FetchRecordQueryTests.__allTests__FetchRecordQueryTests),
      testCase(MKAnyRecordTests.__allTests__MKAnyRecordTests),
      testCase(MKDatabaseConnectionTests.__allTests__MKDatabaseConnectionTests),
      testCase(MKEncoderTests.__allTests__MKEncoderTests),
      testCase(MKServerResponseTests.__allTests__MKServerResponseTests),
      testCase(MKTokenManagerTests.__allTests__MKTokenManagerTests),
      testCase(RecordNameParserTests.__allTests__RecordNameParserTests),
      testCase(RequestConfigurationFactoryTests.__allTests__RequestConfigurationFactoryTests),
      testCase(ResultTransformerTests.__allTests__ResultTransformerTests)
    ]
  }
#endif
